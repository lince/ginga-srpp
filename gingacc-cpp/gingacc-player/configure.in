AC_INIT(configure.in)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gingaccplayer, 0.11.2)

AC_LANG_CPLUSPLUS
AC_PROG_CXX([g++])
AM_PROG_LIBTOOL

CXXFLAGS="-fPIC $CXXFLAGS"
CFLAGS="-fPIC $CFLAGS"

# Bring additional directories where things might be found into our
# search path. I don't know why autoconf doesn't do this by default
for spfx in /usr/lib/ /usr/local/lib/ /usr/local/lib/ginga/ /usr/local/lib/ginga/iocontents; do
if test -d ${spfx}; then
LDFLAGS="-L${spfx} $LDFLAGS"
fi
done

for spfx in /usr/include/ /usr/local/include/ /usr/local/include/ginga/; do
if test -d ${spfx}; then
CPPFLAGS="-I${spfx} $CPPFLAGS"
fi
done

###########
# HEADERS #
###########

##################
# TeleMidia Util #
##################
AC_CHECK_HEADER([util/functions.h], [], AC_MSG_ERROR([

Couldn't find TeleMidia Util headers.
Please install TeleMidia Util Headers.

]))

##########################
# Ginga CC System Thread #
##########################
AC_CHECK_HEADER([system/thread/Thread.h], [], AC_MSG_ERROR([

Couldn't find Ginga CC System Thread headers.
Please install Ginga CC System Thread Headers.

]))

#######
# Lua #
#######
AC_CHECK_HEADER([lua.h], [], AC_MSG_ERROR([

Couldn't find Lua headers.
Please install Lua 5.1.2 or later.

]))

#######################
# Ginga CC System I/O #
#######################
AC_CHECK_HEADER([system/io/interface/IIOContainer.h], [], AC_MSG_ERROR([

Couldn't find Ginga Common Core System I/O headers.
Please install gingacc-system project.

]))


########
# LIBS #
########

##################
# TeleMidia Util #
##################
AC_HAVE_LIBRARY(telemidiautil, , AC_ERROR([

Couldn't find TeleMidia Util library.
Please install TeleMidia Util Library.

]))

##########################
# Ginga CC System Thread #
##########################
AC_HAVE_LIBRARY(gingaccsystemthread, , AC_ERROR([

Couldn't find Ginga CC System Thread library.
Please install Ginga CC System Thread Library.

]))

###################
# TeleMidia Links #
###################
AC_HAVE_LIBRARY(telemidialinks, , AC_ERROR([

Couldn't find telemidialinks library.
Please install TeleMidia Links Player.

]))

############
# libasync #
############
#AC_HAVE_LIBRARY(async, , AC_ERROR([
#
#Couldn't find async library.
#Please install libasync.
#
#]))

#######
# Lua #
#######
AC_HAVE_LIBRARY(lua, , AC_ERROR([

Couldn't find Lua library.
Please install Lua 5.1.2 or later.

]))

##############
# JAVA check #
##############
ncletplayer=no
AC_ARG_ENABLE(ncletplayer,
  [  --enable-ncletplayer    build nclet player support [[default=no]]],
  enable_ncletplayer="$enableval", enable_ncletplayer=no)

if test x$enable_ncletplayer = xyes; then
  AC_HAVE_LIBRARY(jni, [
      AC_CHECK_HEADER(SAVIGNON_PATH!!!!/jni.h,
        ncletplayer=yes
        NCLET_LIBS='-ljni -lOUTRAS_LIBS_SAVIGNON'
        NCLET_HEADERS='NCLetPlayer.h'
        AC_DEFINE(HAVE_NCLET, 1, [Def to 1 if you have nclet player support.]),
        AC_MSG_WARN([
*** Headers not found -- nclet player support will not be built.]))
    ], [
      AC_MSG_WARN([
*** jni not found -- nclet player support will not be built.])
    ], -lm -lSAVIGNON_OUTRAS_DEPENDENCIAS)
fi

AM_CONDITIONAL(NCLET, test x$ncletplayer = xyes)
AC_SUBST(NCLET_LIBS)
AC_SUBST(NCLET_HEADERS)

#####################################
# Offering a time stamp alternative #
#####################################
clocktime=yes
AC_ARG_ENABLE(clocktime,
  [  --enable-clocktime build project using clock to player time [[default=yes]]],
  enable_clocktime="$enableval", enable_clocktime=yes)

if test x$enable_clocktime = xno; then
   AC_DEFINE(HAVE_CLOCKTIME, 0, [Def to 0 if you don't have timer support.])
   AC_MSG_WARN([*** Clock time support will not be built (using PTS instead.])

else
   AC_DEFINE(HAVE_CLOCKTIME, 1, [Def to 1 if you have timer support.])
   AC_MSG_RESULT([*** Clock time support will be built.])
fi

AM_CONDITIONAL(clocktime, test "$enable_clocktime" = "no")

############################################
# Offering a non-componentized alternative #
############################################
components=yes
AC_ARG_ENABLE(components,
  [  --enable-components build project using components [[default=yes]]],
  enable_components="$enableval", enable_components=yes)

if test x$enable_components = xno; then
   COMPONENTS_LIBS='-lgingaccsysctsdfbf -lgingaccsysctsfs \
    -lgingaccsysctsimgdfb -lgingaccsysctsdfbav \
    -lgingaccsystemio -lgingaccsystemiocodemap \
    -lgingaccsystemiodfb -lgingaccsystemthread \
    -L/usr/local/lib/ginga/ -L/usr/local/lib \
    -L/usr/local/lib/ginga/iocontents/ \
    -L/usr/local/lib/lua/5.1 -L/usr/local/lib/lua/5.1/socket'
   COMPONENTS_INCS='-I/usr/local/include/ginga -I/usr/local/include/directfb/'
   AC_DEFINE(HAVE_COMPSUPPORT, 0, [Def to 0 if you don't have Component support.])
   AC_MSG_WARN([*** Component support will not be built.])

else
   COMPONENTS_LIBS='-ldl -L/usr/local/lib/ -L/usr/local/lib/ginga/'
   COMPONENTS_INCS='-I/usr/local/include/ginga'
   AC_DEFINE(HAVE_COMPSUPPORT, 1, [Def to 1 if you have Component support.])
   AC_MSG_RESULT([*** Component support will be built.])
fi

AM_CONDITIONAL(COMPONENTS, test "$enable_components" = "no")
AC_SUBST(COMPONENTS_LIBS)
AC_SUBST(COMPONENTS_INCS)


AC_OUTPUT(Makefile files/Makefile files/scripts/Makefile
	include/Makefile src/Makefile src/image/Makefile
	src/application/imperative/lua/Makefile
	src/application/declarative/xhtml/Makefile
	src/text/Makefile src/text/plain/Makefile
	src/text/srt/Makefile src/video/Makefile src/tv/Makefile
	src/widget/Makefile test/Makefile)

AC_MSG_RESULT([
Build options: 
  Module directory        $MODULEDIR
  NCLET Support           $ncletplayer
])
