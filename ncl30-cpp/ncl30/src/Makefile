# Makefile.in generated by automake 1.10 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/ncl30
pkglibdir = $(libdir)/ncl30
pkgincludedir = $(includedir)/ncl30
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
localLib_PROGRAMS = libncl30.so$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(localLibdir)"
localLibPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(localLib_PROGRAMS)
am_libncl30_so_OBJECTS = Comparator.$(OBJEXT) Transition.$(OBJEXT) \
	TransitionBase.$(OBJEXT) TransitionUtil.$(OBJEXT) \
	LinearTimeCostFunction.$(OBJEXT) \
	TemporalFlexibilityFunction.$(OBJEXT) CompositeRule.$(OBJEXT) \
	DescriptorSwitch.$(OBJEXT) Rule.$(OBJEXT) RuleBase.$(OBJEXT) \
	SimpleRule.$(OBJEXT) SwitchContent.$(OBJEXT) \
	SwitchNode.$(OBJEXT) ReferredNode.$(OBJEXT) \
	ReferNode.$(OBJEXT) FocusDecoration.$(OBJEXT) \
	KeyNavigation.$(OBJEXT) Meta.$(OBJEXT) Metadata.$(OBJEXT) \
	Bind.$(OBJEXT) CausalLink.$(OBJEXT) Link.$(OBJEXT) \
	LayoutRegion.$(OBJEXT) DeviceLayout.$(OBJEXT) \
	RegionBase.$(OBJEXT) Anchor.$(OBJEXT) \
	CircleSpatialAnchor.$(OBJEXT) ContentAnchor.$(OBJEXT) \
	IntervalAnchor.$(OBJEXT) LabeledAnchor.$(OBJEXT) \
	LambdaAnchor.$(OBJEXT) Port.$(OBJEXT) PropertyAnchor.$(OBJEXT) \
	RectangleSpatialAnchor.$(OBJEXT) \
	RelativeTimeIntervalAnchor.$(OBJEXT) \
	SampleIntervalAnchor.$(OBJEXT) SwitchPort.$(OBJEXT) \
	TextAnchor.$(OBJEXT) Descriptor.$(OBJEXT) \
	DescriptorBase.$(OBJEXT) Action.$(OBJEXT) \
	AssessmentStatement.$(OBJEXT) AttributeAssessment.$(OBJEXT) \
	CausalConnector.$(OBJEXT) CompoundAction.$(OBJEXT) \
	CompoundCondition.$(OBJEXT) CompoundStatement.$(OBJEXT) \
	Connector.$(OBJEXT) ConnectorBase.$(OBJEXT) \
	EventTransitionAssessment.$(OBJEXT) EventUtil.$(OBJEXT) \
	Role.$(OBJEXT) SimpleAction.$(OBJEXT) \
	SimpleCondition.$(OBJEXT) TriggerExpression.$(OBJEXT) \
	ValueAssessment.$(OBJEXT) AbsoluteReferenceContent.$(OBJEXT) \
	CompositeNode.$(OBJEXT) Content.$(OBJEXT) \
	ContentNode.$(OBJEXT) ContentTypeManager.$(OBJEXT) \
	ContextNode.$(OBJEXT) Node.$(OBJEXT) NodeEntity.$(OBJEXT) \
	PrivateBase.$(OBJEXT) ReferenceContent.$(OBJEXT) \
	RelativeReferenceContent.$(OBJEXT) Animation.$(OBJEXT) \
	Base.$(OBJEXT) Entity.$(OBJEXT) NclDocument.$(OBJEXT) \
	Parameter.$(OBJEXT)
libncl30_so_OBJECTS = $(am_libncl30_so_OBJECTS)
libncl30_so_DEPENDENCIES =
libncl30_so_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(libncl30_so_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libncl30_so_SOURCES)
DIST_SOURCES = $(libncl30_so_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /usr/src/gingaUFSCAR/ncl30-cpp/ncl30/missing --run aclocal-1.10
AMTAR = ${SHELL} /usr/src/gingaUFSCAR/ncl30-cpp/ncl30/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /usr/src/gingaUFSCAR/ncl30-cpp/ncl30/missing --run autoconf
AUTOHEADER = ${SHELL} /usr/src/gingaUFSCAR/ncl30-cpp/ncl30/missing --run autoheader
AUTOMAKE = ${SHELL} /usr/src/gingaUFSCAR/ncl30-cpp/ncl30/missing --run automake-1.10
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -fPIC -g -O2
COMPONENTS_LIBS = -ldl -L/usr/local/lib/ -L/usr/local/lib/ginga/
CPP = gcc -E
CPPFLAGS = -I/usr/local/include/ginga/ -I/usr/local/include/ -I/usr/include/ 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -fPIC -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
F77 = 
FFLAGS = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = -L/usr/local/lib/ginga/ -L/usr/local/lib/ -L/usr/lib/ 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /usr/src/gingaUFSCAR/ncl30-cpp/ncl30/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = ncl30
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 0.11.2
abs_builddir = /usr/src/gingaUFSCAR/ncl30-cpp/ncl30/src
abs_srcdir = /usr/src/gingaUFSCAR/ncl30-cpp/ncl30/src
abs_top_builddir = /usr/src/gingaUFSCAR/ncl30-cpp/ncl30
abs_top_srcdir = /usr/src/gingaUFSCAR/ncl30-cpp/ncl30
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /usr/src/gingaUFSCAR/ncl30-cpp/ncl30/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ..
top_srcdir = ..

# set the include path found by configure
INCLUDES = -I/usr/local/include/directfb/ -I/usr/local/include/ginga/ \
	$(all_includes)


# the library search path.
localLibdir = /usr/local/lib/ginga
libncl30_so_LDFLAGS = -Wl,-soname,libncl30.so -shared \
-L/usr/local/lib -L/usr/local/lib/ginga

libncl30_so_SOURCES = util/Comparator.cpp transition/Transition.cpp \
transition/TransitionBase.cpp transition/TransitionUtil.cpp \
time/flexibility/LinearTimeCostFunction.cpp \
time/flexibility/TemporalFlexibilityFunction.cpp switches/CompositeRule.cpp \
switches/DescriptorSwitch.cpp switches/Rule.cpp switches/RuleBase.cpp \
switches/SimpleRule.cpp switches/SwitchContent.cpp switches/SwitchNode.cpp \
reuse/ReferredNode.cpp reuse/ReferNode.cpp navigation/FocusDecoration.cpp \
navigation/KeyNavigation.cpp metainformation/Meta.cpp \
metainformation/Metadata.cpp link/Bind.cpp link/CausalLink.cpp link/Link.cpp \
layout/LayoutRegion.cpp layout/DeviceLayout.cpp \
layout/RegionBase.cpp interfaces/Anchor.cpp \
interfaces/CircleSpatialAnchor.cpp interfaces/ContentAnchor.cpp \
interfaces/IntervalAnchor.cpp interfaces/LabeledAnchor.cpp \
interfaces/LambdaAnchor.cpp interfaces/Port.cpp interfaces/PropertyAnchor.cpp \
interfaces/RectangleSpatialAnchor.cpp \
interfaces/RelativeTimeIntervalAnchor.cpp interfaces/SampleIntervalAnchor.cpp \
interfaces/SwitchPort.cpp interfaces/TextAnchor.cpp descriptor/Descriptor.cpp \
descriptor/DescriptorBase.cpp connectors/Action.cpp \
connectors/AssessmentStatement.cpp connectors/AttributeAssessment.cpp \
connectors/CausalConnector.cpp connectors/CompoundAction.cpp \
connectors/CompoundCondition.cpp connectors/CompoundStatement.cpp \
connectors/Connector.cpp connectors/ConnectorBase.cpp \
connectors/EventTransitionAssessment.cpp connectors/EventUtil.cpp \
connectors/Role.cpp connectors/SimpleAction.cpp \
connectors/SimpleCondition.cpp connectors/TriggerExpression.cpp \
connectors/ValueAssessment.cpp components/AbsoluteReferenceContent.cpp \
components/CompositeNode.cpp components/Content.cpp \
components/ContentNode.cpp components/ContentTypeManager.cpp \
components/ContextNode.cpp components/Node.cpp components/NodeEntity.cpp \
components/PrivateBase.cpp components/ReferenceContent.cpp \
components/RelativeReferenceContent.cpp animation/Animation.cpp \
Base.cpp Entity.cpp NclDocument.cpp Parameter.cpp

libncl30_so_LDADD = -ltelemidiautil -lpthread
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-localLibPROGRAMS: $(localLib_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(localLibdir)" || $(MKDIR_P) "$(DESTDIR)$(localLibdir)"
	@list='$(localLib_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(localLibPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(localLibdir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(localLibPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(localLibdir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-localLibPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(localLib_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(localLibdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(localLibdir)/$$f"; \
	done

clean-localLibPROGRAMS:
	@list='$(localLib_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
libncl30.so$(EXEEXT): $(libncl30_so_OBJECTS) $(libncl30_so_DEPENDENCIES) 
	@rm -f libncl30.so$(EXEEXT)
	$(libncl30_so_LINK) $(libncl30_so_OBJECTS) $(libncl30_so_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/AbsoluteReferenceContent.Po
include ./$(DEPDIR)/Action.Po
include ./$(DEPDIR)/Anchor.Po
include ./$(DEPDIR)/Animation.Po
include ./$(DEPDIR)/AssessmentStatement.Po
include ./$(DEPDIR)/AttributeAssessment.Po
include ./$(DEPDIR)/Base.Po
include ./$(DEPDIR)/Bind.Po
include ./$(DEPDIR)/CausalConnector.Po
include ./$(DEPDIR)/CausalLink.Po
include ./$(DEPDIR)/CircleSpatialAnchor.Po
include ./$(DEPDIR)/Comparator.Po
include ./$(DEPDIR)/CompositeNode.Po
include ./$(DEPDIR)/CompositeRule.Po
include ./$(DEPDIR)/CompoundAction.Po
include ./$(DEPDIR)/CompoundCondition.Po
include ./$(DEPDIR)/CompoundStatement.Po
include ./$(DEPDIR)/Connector.Po
include ./$(DEPDIR)/ConnectorBase.Po
include ./$(DEPDIR)/Content.Po
include ./$(DEPDIR)/ContentAnchor.Po
include ./$(DEPDIR)/ContentNode.Po
include ./$(DEPDIR)/ContentTypeManager.Po
include ./$(DEPDIR)/ContextNode.Po
include ./$(DEPDIR)/Descriptor.Po
include ./$(DEPDIR)/DescriptorBase.Po
include ./$(DEPDIR)/DescriptorSwitch.Po
include ./$(DEPDIR)/DeviceLayout.Po
include ./$(DEPDIR)/Entity.Po
include ./$(DEPDIR)/EventTransitionAssessment.Po
include ./$(DEPDIR)/EventUtil.Po
include ./$(DEPDIR)/FocusDecoration.Po
include ./$(DEPDIR)/IntervalAnchor.Po
include ./$(DEPDIR)/KeyNavigation.Po
include ./$(DEPDIR)/LabeledAnchor.Po
include ./$(DEPDIR)/LambdaAnchor.Po
include ./$(DEPDIR)/LayoutRegion.Po
include ./$(DEPDIR)/LinearTimeCostFunction.Po
include ./$(DEPDIR)/Link.Po
include ./$(DEPDIR)/Meta.Po
include ./$(DEPDIR)/Metadata.Po
include ./$(DEPDIR)/NclDocument.Po
include ./$(DEPDIR)/Node.Po
include ./$(DEPDIR)/NodeEntity.Po
include ./$(DEPDIR)/Parameter.Po
include ./$(DEPDIR)/Port.Po
include ./$(DEPDIR)/PrivateBase.Po
include ./$(DEPDIR)/PropertyAnchor.Po
include ./$(DEPDIR)/RectangleSpatialAnchor.Po
include ./$(DEPDIR)/ReferNode.Po
include ./$(DEPDIR)/ReferenceContent.Po
include ./$(DEPDIR)/ReferredNode.Po
include ./$(DEPDIR)/RegionBase.Po
include ./$(DEPDIR)/RelativeReferenceContent.Po
include ./$(DEPDIR)/RelativeTimeIntervalAnchor.Po
include ./$(DEPDIR)/Role.Po
include ./$(DEPDIR)/Rule.Po
include ./$(DEPDIR)/RuleBase.Po
include ./$(DEPDIR)/SampleIntervalAnchor.Po
include ./$(DEPDIR)/SimpleAction.Po
include ./$(DEPDIR)/SimpleCondition.Po
include ./$(DEPDIR)/SimpleRule.Po
include ./$(DEPDIR)/SwitchContent.Po
include ./$(DEPDIR)/SwitchNode.Po
include ./$(DEPDIR)/SwitchPort.Po
include ./$(DEPDIR)/TemporalFlexibilityFunction.Po
include ./$(DEPDIR)/TextAnchor.Po
include ./$(DEPDIR)/Transition.Po
include ./$(DEPDIR)/TransitionBase.Po
include ./$(DEPDIR)/TransitionUtil.Po
include ./$(DEPDIR)/TriggerExpression.Po
include ./$(DEPDIR)/ValueAssessment.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

Comparator.o: util/Comparator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Comparator.o -MD -MP -MF $(DEPDIR)/Comparator.Tpo -c -o Comparator.o `test -f 'util/Comparator.cpp' || echo '$(srcdir)/'`util/Comparator.cpp
	mv -f $(DEPDIR)/Comparator.Tpo $(DEPDIR)/Comparator.Po
#	source='util/Comparator.cpp' object='Comparator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Comparator.o `test -f 'util/Comparator.cpp' || echo '$(srcdir)/'`util/Comparator.cpp

Comparator.obj: util/Comparator.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Comparator.obj -MD -MP -MF $(DEPDIR)/Comparator.Tpo -c -o Comparator.obj `if test -f 'util/Comparator.cpp'; then $(CYGPATH_W) 'util/Comparator.cpp'; else $(CYGPATH_W) '$(srcdir)/util/Comparator.cpp'; fi`
	mv -f $(DEPDIR)/Comparator.Tpo $(DEPDIR)/Comparator.Po
#	source='util/Comparator.cpp' object='Comparator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Comparator.obj `if test -f 'util/Comparator.cpp'; then $(CYGPATH_W) 'util/Comparator.cpp'; else $(CYGPATH_W) '$(srcdir)/util/Comparator.cpp'; fi`

Transition.o: transition/Transition.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Transition.o -MD -MP -MF $(DEPDIR)/Transition.Tpo -c -o Transition.o `test -f 'transition/Transition.cpp' || echo '$(srcdir)/'`transition/Transition.cpp
	mv -f $(DEPDIR)/Transition.Tpo $(DEPDIR)/Transition.Po
#	source='transition/Transition.cpp' object='Transition.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Transition.o `test -f 'transition/Transition.cpp' || echo '$(srcdir)/'`transition/Transition.cpp

Transition.obj: transition/Transition.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Transition.obj -MD -MP -MF $(DEPDIR)/Transition.Tpo -c -o Transition.obj `if test -f 'transition/Transition.cpp'; then $(CYGPATH_W) 'transition/Transition.cpp'; else $(CYGPATH_W) '$(srcdir)/transition/Transition.cpp'; fi`
	mv -f $(DEPDIR)/Transition.Tpo $(DEPDIR)/Transition.Po
#	source='transition/Transition.cpp' object='Transition.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Transition.obj `if test -f 'transition/Transition.cpp'; then $(CYGPATH_W) 'transition/Transition.cpp'; else $(CYGPATH_W) '$(srcdir)/transition/Transition.cpp'; fi`

TransitionBase.o: transition/TransitionBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TransitionBase.o -MD -MP -MF $(DEPDIR)/TransitionBase.Tpo -c -o TransitionBase.o `test -f 'transition/TransitionBase.cpp' || echo '$(srcdir)/'`transition/TransitionBase.cpp
	mv -f $(DEPDIR)/TransitionBase.Tpo $(DEPDIR)/TransitionBase.Po
#	source='transition/TransitionBase.cpp' object='TransitionBase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TransitionBase.o `test -f 'transition/TransitionBase.cpp' || echo '$(srcdir)/'`transition/TransitionBase.cpp

TransitionBase.obj: transition/TransitionBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TransitionBase.obj -MD -MP -MF $(DEPDIR)/TransitionBase.Tpo -c -o TransitionBase.obj `if test -f 'transition/TransitionBase.cpp'; then $(CYGPATH_W) 'transition/TransitionBase.cpp'; else $(CYGPATH_W) '$(srcdir)/transition/TransitionBase.cpp'; fi`
	mv -f $(DEPDIR)/TransitionBase.Tpo $(DEPDIR)/TransitionBase.Po
#	source='transition/TransitionBase.cpp' object='TransitionBase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TransitionBase.obj `if test -f 'transition/TransitionBase.cpp'; then $(CYGPATH_W) 'transition/TransitionBase.cpp'; else $(CYGPATH_W) '$(srcdir)/transition/TransitionBase.cpp'; fi`

TransitionUtil.o: transition/TransitionUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TransitionUtil.o -MD -MP -MF $(DEPDIR)/TransitionUtil.Tpo -c -o TransitionUtil.o `test -f 'transition/TransitionUtil.cpp' || echo '$(srcdir)/'`transition/TransitionUtil.cpp
	mv -f $(DEPDIR)/TransitionUtil.Tpo $(DEPDIR)/TransitionUtil.Po
#	source='transition/TransitionUtil.cpp' object='TransitionUtil.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TransitionUtil.o `test -f 'transition/TransitionUtil.cpp' || echo '$(srcdir)/'`transition/TransitionUtil.cpp

TransitionUtil.obj: transition/TransitionUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TransitionUtil.obj -MD -MP -MF $(DEPDIR)/TransitionUtil.Tpo -c -o TransitionUtil.obj `if test -f 'transition/TransitionUtil.cpp'; then $(CYGPATH_W) 'transition/TransitionUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/transition/TransitionUtil.cpp'; fi`
	mv -f $(DEPDIR)/TransitionUtil.Tpo $(DEPDIR)/TransitionUtil.Po
#	source='transition/TransitionUtil.cpp' object='TransitionUtil.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TransitionUtil.obj `if test -f 'transition/TransitionUtil.cpp'; then $(CYGPATH_W) 'transition/TransitionUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/transition/TransitionUtil.cpp'; fi`

LinearTimeCostFunction.o: time/flexibility/LinearTimeCostFunction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LinearTimeCostFunction.o -MD -MP -MF $(DEPDIR)/LinearTimeCostFunction.Tpo -c -o LinearTimeCostFunction.o `test -f 'time/flexibility/LinearTimeCostFunction.cpp' || echo '$(srcdir)/'`time/flexibility/LinearTimeCostFunction.cpp
	mv -f $(DEPDIR)/LinearTimeCostFunction.Tpo $(DEPDIR)/LinearTimeCostFunction.Po
#	source='time/flexibility/LinearTimeCostFunction.cpp' object='LinearTimeCostFunction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LinearTimeCostFunction.o `test -f 'time/flexibility/LinearTimeCostFunction.cpp' || echo '$(srcdir)/'`time/flexibility/LinearTimeCostFunction.cpp

LinearTimeCostFunction.obj: time/flexibility/LinearTimeCostFunction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LinearTimeCostFunction.obj -MD -MP -MF $(DEPDIR)/LinearTimeCostFunction.Tpo -c -o LinearTimeCostFunction.obj `if test -f 'time/flexibility/LinearTimeCostFunction.cpp'; then $(CYGPATH_W) 'time/flexibility/LinearTimeCostFunction.cpp'; else $(CYGPATH_W) '$(srcdir)/time/flexibility/LinearTimeCostFunction.cpp'; fi`
	mv -f $(DEPDIR)/LinearTimeCostFunction.Tpo $(DEPDIR)/LinearTimeCostFunction.Po
#	source='time/flexibility/LinearTimeCostFunction.cpp' object='LinearTimeCostFunction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LinearTimeCostFunction.obj `if test -f 'time/flexibility/LinearTimeCostFunction.cpp'; then $(CYGPATH_W) 'time/flexibility/LinearTimeCostFunction.cpp'; else $(CYGPATH_W) '$(srcdir)/time/flexibility/LinearTimeCostFunction.cpp'; fi`

TemporalFlexibilityFunction.o: time/flexibility/TemporalFlexibilityFunction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TemporalFlexibilityFunction.o -MD -MP -MF $(DEPDIR)/TemporalFlexibilityFunction.Tpo -c -o TemporalFlexibilityFunction.o `test -f 'time/flexibility/TemporalFlexibilityFunction.cpp' || echo '$(srcdir)/'`time/flexibility/TemporalFlexibilityFunction.cpp
	mv -f $(DEPDIR)/TemporalFlexibilityFunction.Tpo $(DEPDIR)/TemporalFlexibilityFunction.Po
#	source='time/flexibility/TemporalFlexibilityFunction.cpp' object='TemporalFlexibilityFunction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TemporalFlexibilityFunction.o `test -f 'time/flexibility/TemporalFlexibilityFunction.cpp' || echo '$(srcdir)/'`time/flexibility/TemporalFlexibilityFunction.cpp

TemporalFlexibilityFunction.obj: time/flexibility/TemporalFlexibilityFunction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TemporalFlexibilityFunction.obj -MD -MP -MF $(DEPDIR)/TemporalFlexibilityFunction.Tpo -c -o TemporalFlexibilityFunction.obj `if test -f 'time/flexibility/TemporalFlexibilityFunction.cpp'; then $(CYGPATH_W) 'time/flexibility/TemporalFlexibilityFunction.cpp'; else $(CYGPATH_W) '$(srcdir)/time/flexibility/TemporalFlexibilityFunction.cpp'; fi`
	mv -f $(DEPDIR)/TemporalFlexibilityFunction.Tpo $(DEPDIR)/TemporalFlexibilityFunction.Po
#	source='time/flexibility/TemporalFlexibilityFunction.cpp' object='TemporalFlexibilityFunction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TemporalFlexibilityFunction.obj `if test -f 'time/flexibility/TemporalFlexibilityFunction.cpp'; then $(CYGPATH_W) 'time/flexibility/TemporalFlexibilityFunction.cpp'; else $(CYGPATH_W) '$(srcdir)/time/flexibility/TemporalFlexibilityFunction.cpp'; fi`

CompositeRule.o: switches/CompositeRule.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompositeRule.o -MD -MP -MF $(DEPDIR)/CompositeRule.Tpo -c -o CompositeRule.o `test -f 'switches/CompositeRule.cpp' || echo '$(srcdir)/'`switches/CompositeRule.cpp
	mv -f $(DEPDIR)/CompositeRule.Tpo $(DEPDIR)/CompositeRule.Po
#	source='switches/CompositeRule.cpp' object='CompositeRule.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompositeRule.o `test -f 'switches/CompositeRule.cpp' || echo '$(srcdir)/'`switches/CompositeRule.cpp

CompositeRule.obj: switches/CompositeRule.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompositeRule.obj -MD -MP -MF $(DEPDIR)/CompositeRule.Tpo -c -o CompositeRule.obj `if test -f 'switches/CompositeRule.cpp'; then $(CYGPATH_W) 'switches/CompositeRule.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/CompositeRule.cpp'; fi`
	mv -f $(DEPDIR)/CompositeRule.Tpo $(DEPDIR)/CompositeRule.Po
#	source='switches/CompositeRule.cpp' object='CompositeRule.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompositeRule.obj `if test -f 'switches/CompositeRule.cpp'; then $(CYGPATH_W) 'switches/CompositeRule.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/CompositeRule.cpp'; fi`

DescriptorSwitch.o: switches/DescriptorSwitch.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DescriptorSwitch.o -MD -MP -MF $(DEPDIR)/DescriptorSwitch.Tpo -c -o DescriptorSwitch.o `test -f 'switches/DescriptorSwitch.cpp' || echo '$(srcdir)/'`switches/DescriptorSwitch.cpp
	mv -f $(DEPDIR)/DescriptorSwitch.Tpo $(DEPDIR)/DescriptorSwitch.Po
#	source='switches/DescriptorSwitch.cpp' object='DescriptorSwitch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DescriptorSwitch.o `test -f 'switches/DescriptorSwitch.cpp' || echo '$(srcdir)/'`switches/DescriptorSwitch.cpp

DescriptorSwitch.obj: switches/DescriptorSwitch.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DescriptorSwitch.obj -MD -MP -MF $(DEPDIR)/DescriptorSwitch.Tpo -c -o DescriptorSwitch.obj `if test -f 'switches/DescriptorSwitch.cpp'; then $(CYGPATH_W) 'switches/DescriptorSwitch.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/DescriptorSwitch.cpp'; fi`
	mv -f $(DEPDIR)/DescriptorSwitch.Tpo $(DEPDIR)/DescriptorSwitch.Po
#	source='switches/DescriptorSwitch.cpp' object='DescriptorSwitch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DescriptorSwitch.obj `if test -f 'switches/DescriptorSwitch.cpp'; then $(CYGPATH_W) 'switches/DescriptorSwitch.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/DescriptorSwitch.cpp'; fi`

Rule.o: switches/Rule.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Rule.o -MD -MP -MF $(DEPDIR)/Rule.Tpo -c -o Rule.o `test -f 'switches/Rule.cpp' || echo '$(srcdir)/'`switches/Rule.cpp
	mv -f $(DEPDIR)/Rule.Tpo $(DEPDIR)/Rule.Po
#	source='switches/Rule.cpp' object='Rule.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Rule.o `test -f 'switches/Rule.cpp' || echo '$(srcdir)/'`switches/Rule.cpp

Rule.obj: switches/Rule.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Rule.obj -MD -MP -MF $(DEPDIR)/Rule.Tpo -c -o Rule.obj `if test -f 'switches/Rule.cpp'; then $(CYGPATH_W) 'switches/Rule.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/Rule.cpp'; fi`
	mv -f $(DEPDIR)/Rule.Tpo $(DEPDIR)/Rule.Po
#	source='switches/Rule.cpp' object='Rule.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Rule.obj `if test -f 'switches/Rule.cpp'; then $(CYGPATH_W) 'switches/Rule.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/Rule.cpp'; fi`

RuleBase.o: switches/RuleBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RuleBase.o -MD -MP -MF $(DEPDIR)/RuleBase.Tpo -c -o RuleBase.o `test -f 'switches/RuleBase.cpp' || echo '$(srcdir)/'`switches/RuleBase.cpp
	mv -f $(DEPDIR)/RuleBase.Tpo $(DEPDIR)/RuleBase.Po
#	source='switches/RuleBase.cpp' object='RuleBase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RuleBase.o `test -f 'switches/RuleBase.cpp' || echo '$(srcdir)/'`switches/RuleBase.cpp

RuleBase.obj: switches/RuleBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RuleBase.obj -MD -MP -MF $(DEPDIR)/RuleBase.Tpo -c -o RuleBase.obj `if test -f 'switches/RuleBase.cpp'; then $(CYGPATH_W) 'switches/RuleBase.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/RuleBase.cpp'; fi`
	mv -f $(DEPDIR)/RuleBase.Tpo $(DEPDIR)/RuleBase.Po
#	source='switches/RuleBase.cpp' object='RuleBase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RuleBase.obj `if test -f 'switches/RuleBase.cpp'; then $(CYGPATH_W) 'switches/RuleBase.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/RuleBase.cpp'; fi`

SimpleRule.o: switches/SimpleRule.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleRule.o -MD -MP -MF $(DEPDIR)/SimpleRule.Tpo -c -o SimpleRule.o `test -f 'switches/SimpleRule.cpp' || echo '$(srcdir)/'`switches/SimpleRule.cpp
	mv -f $(DEPDIR)/SimpleRule.Tpo $(DEPDIR)/SimpleRule.Po
#	source='switches/SimpleRule.cpp' object='SimpleRule.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleRule.o `test -f 'switches/SimpleRule.cpp' || echo '$(srcdir)/'`switches/SimpleRule.cpp

SimpleRule.obj: switches/SimpleRule.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleRule.obj -MD -MP -MF $(DEPDIR)/SimpleRule.Tpo -c -o SimpleRule.obj `if test -f 'switches/SimpleRule.cpp'; then $(CYGPATH_W) 'switches/SimpleRule.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/SimpleRule.cpp'; fi`
	mv -f $(DEPDIR)/SimpleRule.Tpo $(DEPDIR)/SimpleRule.Po
#	source='switches/SimpleRule.cpp' object='SimpleRule.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleRule.obj `if test -f 'switches/SimpleRule.cpp'; then $(CYGPATH_W) 'switches/SimpleRule.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/SimpleRule.cpp'; fi`

SwitchContent.o: switches/SwitchContent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SwitchContent.o -MD -MP -MF $(DEPDIR)/SwitchContent.Tpo -c -o SwitchContent.o `test -f 'switches/SwitchContent.cpp' || echo '$(srcdir)/'`switches/SwitchContent.cpp
	mv -f $(DEPDIR)/SwitchContent.Tpo $(DEPDIR)/SwitchContent.Po
#	source='switches/SwitchContent.cpp' object='SwitchContent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SwitchContent.o `test -f 'switches/SwitchContent.cpp' || echo '$(srcdir)/'`switches/SwitchContent.cpp

SwitchContent.obj: switches/SwitchContent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SwitchContent.obj -MD -MP -MF $(DEPDIR)/SwitchContent.Tpo -c -o SwitchContent.obj `if test -f 'switches/SwitchContent.cpp'; then $(CYGPATH_W) 'switches/SwitchContent.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/SwitchContent.cpp'; fi`
	mv -f $(DEPDIR)/SwitchContent.Tpo $(DEPDIR)/SwitchContent.Po
#	source='switches/SwitchContent.cpp' object='SwitchContent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SwitchContent.obj `if test -f 'switches/SwitchContent.cpp'; then $(CYGPATH_W) 'switches/SwitchContent.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/SwitchContent.cpp'; fi`

SwitchNode.o: switches/SwitchNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SwitchNode.o -MD -MP -MF $(DEPDIR)/SwitchNode.Tpo -c -o SwitchNode.o `test -f 'switches/SwitchNode.cpp' || echo '$(srcdir)/'`switches/SwitchNode.cpp
	mv -f $(DEPDIR)/SwitchNode.Tpo $(DEPDIR)/SwitchNode.Po
#	source='switches/SwitchNode.cpp' object='SwitchNode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SwitchNode.o `test -f 'switches/SwitchNode.cpp' || echo '$(srcdir)/'`switches/SwitchNode.cpp

SwitchNode.obj: switches/SwitchNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SwitchNode.obj -MD -MP -MF $(DEPDIR)/SwitchNode.Tpo -c -o SwitchNode.obj `if test -f 'switches/SwitchNode.cpp'; then $(CYGPATH_W) 'switches/SwitchNode.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/SwitchNode.cpp'; fi`
	mv -f $(DEPDIR)/SwitchNode.Tpo $(DEPDIR)/SwitchNode.Po
#	source='switches/SwitchNode.cpp' object='SwitchNode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SwitchNode.obj `if test -f 'switches/SwitchNode.cpp'; then $(CYGPATH_W) 'switches/SwitchNode.cpp'; else $(CYGPATH_W) '$(srcdir)/switches/SwitchNode.cpp'; fi`

ReferredNode.o: reuse/ReferredNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ReferredNode.o -MD -MP -MF $(DEPDIR)/ReferredNode.Tpo -c -o ReferredNode.o `test -f 'reuse/ReferredNode.cpp' || echo '$(srcdir)/'`reuse/ReferredNode.cpp
	mv -f $(DEPDIR)/ReferredNode.Tpo $(DEPDIR)/ReferredNode.Po
#	source='reuse/ReferredNode.cpp' object='ReferredNode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ReferredNode.o `test -f 'reuse/ReferredNode.cpp' || echo '$(srcdir)/'`reuse/ReferredNode.cpp

ReferredNode.obj: reuse/ReferredNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ReferredNode.obj -MD -MP -MF $(DEPDIR)/ReferredNode.Tpo -c -o ReferredNode.obj `if test -f 'reuse/ReferredNode.cpp'; then $(CYGPATH_W) 'reuse/ReferredNode.cpp'; else $(CYGPATH_W) '$(srcdir)/reuse/ReferredNode.cpp'; fi`
	mv -f $(DEPDIR)/ReferredNode.Tpo $(DEPDIR)/ReferredNode.Po
#	source='reuse/ReferredNode.cpp' object='ReferredNode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ReferredNode.obj `if test -f 'reuse/ReferredNode.cpp'; then $(CYGPATH_W) 'reuse/ReferredNode.cpp'; else $(CYGPATH_W) '$(srcdir)/reuse/ReferredNode.cpp'; fi`

ReferNode.o: reuse/ReferNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ReferNode.o -MD -MP -MF $(DEPDIR)/ReferNode.Tpo -c -o ReferNode.o `test -f 'reuse/ReferNode.cpp' || echo '$(srcdir)/'`reuse/ReferNode.cpp
	mv -f $(DEPDIR)/ReferNode.Tpo $(DEPDIR)/ReferNode.Po
#	source='reuse/ReferNode.cpp' object='ReferNode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ReferNode.o `test -f 'reuse/ReferNode.cpp' || echo '$(srcdir)/'`reuse/ReferNode.cpp

ReferNode.obj: reuse/ReferNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ReferNode.obj -MD -MP -MF $(DEPDIR)/ReferNode.Tpo -c -o ReferNode.obj `if test -f 'reuse/ReferNode.cpp'; then $(CYGPATH_W) 'reuse/ReferNode.cpp'; else $(CYGPATH_W) '$(srcdir)/reuse/ReferNode.cpp'; fi`
	mv -f $(DEPDIR)/ReferNode.Tpo $(DEPDIR)/ReferNode.Po
#	source='reuse/ReferNode.cpp' object='ReferNode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ReferNode.obj `if test -f 'reuse/ReferNode.cpp'; then $(CYGPATH_W) 'reuse/ReferNode.cpp'; else $(CYGPATH_W) '$(srcdir)/reuse/ReferNode.cpp'; fi`

FocusDecoration.o: navigation/FocusDecoration.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FocusDecoration.o -MD -MP -MF $(DEPDIR)/FocusDecoration.Tpo -c -o FocusDecoration.o `test -f 'navigation/FocusDecoration.cpp' || echo '$(srcdir)/'`navigation/FocusDecoration.cpp
	mv -f $(DEPDIR)/FocusDecoration.Tpo $(DEPDIR)/FocusDecoration.Po
#	source='navigation/FocusDecoration.cpp' object='FocusDecoration.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FocusDecoration.o `test -f 'navigation/FocusDecoration.cpp' || echo '$(srcdir)/'`navigation/FocusDecoration.cpp

FocusDecoration.obj: navigation/FocusDecoration.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FocusDecoration.obj -MD -MP -MF $(DEPDIR)/FocusDecoration.Tpo -c -o FocusDecoration.obj `if test -f 'navigation/FocusDecoration.cpp'; then $(CYGPATH_W) 'navigation/FocusDecoration.cpp'; else $(CYGPATH_W) '$(srcdir)/navigation/FocusDecoration.cpp'; fi`
	mv -f $(DEPDIR)/FocusDecoration.Tpo $(DEPDIR)/FocusDecoration.Po
#	source='navigation/FocusDecoration.cpp' object='FocusDecoration.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FocusDecoration.obj `if test -f 'navigation/FocusDecoration.cpp'; then $(CYGPATH_W) 'navigation/FocusDecoration.cpp'; else $(CYGPATH_W) '$(srcdir)/navigation/FocusDecoration.cpp'; fi`

KeyNavigation.o: navigation/KeyNavigation.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeyNavigation.o -MD -MP -MF $(DEPDIR)/KeyNavigation.Tpo -c -o KeyNavigation.o `test -f 'navigation/KeyNavigation.cpp' || echo '$(srcdir)/'`navigation/KeyNavigation.cpp
	mv -f $(DEPDIR)/KeyNavigation.Tpo $(DEPDIR)/KeyNavigation.Po
#	source='navigation/KeyNavigation.cpp' object='KeyNavigation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeyNavigation.o `test -f 'navigation/KeyNavigation.cpp' || echo '$(srcdir)/'`navigation/KeyNavigation.cpp

KeyNavigation.obj: navigation/KeyNavigation.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeyNavigation.obj -MD -MP -MF $(DEPDIR)/KeyNavigation.Tpo -c -o KeyNavigation.obj `if test -f 'navigation/KeyNavigation.cpp'; then $(CYGPATH_W) 'navigation/KeyNavigation.cpp'; else $(CYGPATH_W) '$(srcdir)/navigation/KeyNavigation.cpp'; fi`
	mv -f $(DEPDIR)/KeyNavigation.Tpo $(DEPDIR)/KeyNavigation.Po
#	source='navigation/KeyNavigation.cpp' object='KeyNavigation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeyNavigation.obj `if test -f 'navigation/KeyNavigation.cpp'; then $(CYGPATH_W) 'navigation/KeyNavigation.cpp'; else $(CYGPATH_W) '$(srcdir)/navigation/KeyNavigation.cpp'; fi`

Meta.o: metainformation/Meta.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Meta.o -MD -MP -MF $(DEPDIR)/Meta.Tpo -c -o Meta.o `test -f 'metainformation/Meta.cpp' || echo '$(srcdir)/'`metainformation/Meta.cpp
	mv -f $(DEPDIR)/Meta.Tpo $(DEPDIR)/Meta.Po
#	source='metainformation/Meta.cpp' object='Meta.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Meta.o `test -f 'metainformation/Meta.cpp' || echo '$(srcdir)/'`metainformation/Meta.cpp

Meta.obj: metainformation/Meta.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Meta.obj -MD -MP -MF $(DEPDIR)/Meta.Tpo -c -o Meta.obj `if test -f 'metainformation/Meta.cpp'; then $(CYGPATH_W) 'metainformation/Meta.cpp'; else $(CYGPATH_W) '$(srcdir)/metainformation/Meta.cpp'; fi`
	mv -f $(DEPDIR)/Meta.Tpo $(DEPDIR)/Meta.Po
#	source='metainformation/Meta.cpp' object='Meta.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Meta.obj `if test -f 'metainformation/Meta.cpp'; then $(CYGPATH_W) 'metainformation/Meta.cpp'; else $(CYGPATH_W) '$(srcdir)/metainformation/Meta.cpp'; fi`

Metadata.o: metainformation/Metadata.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Metadata.o -MD -MP -MF $(DEPDIR)/Metadata.Tpo -c -o Metadata.o `test -f 'metainformation/Metadata.cpp' || echo '$(srcdir)/'`metainformation/Metadata.cpp
	mv -f $(DEPDIR)/Metadata.Tpo $(DEPDIR)/Metadata.Po
#	source='metainformation/Metadata.cpp' object='Metadata.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Metadata.o `test -f 'metainformation/Metadata.cpp' || echo '$(srcdir)/'`metainformation/Metadata.cpp

Metadata.obj: metainformation/Metadata.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Metadata.obj -MD -MP -MF $(DEPDIR)/Metadata.Tpo -c -o Metadata.obj `if test -f 'metainformation/Metadata.cpp'; then $(CYGPATH_W) 'metainformation/Metadata.cpp'; else $(CYGPATH_W) '$(srcdir)/metainformation/Metadata.cpp'; fi`
	mv -f $(DEPDIR)/Metadata.Tpo $(DEPDIR)/Metadata.Po
#	source='metainformation/Metadata.cpp' object='Metadata.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Metadata.obj `if test -f 'metainformation/Metadata.cpp'; then $(CYGPATH_W) 'metainformation/Metadata.cpp'; else $(CYGPATH_W) '$(srcdir)/metainformation/Metadata.cpp'; fi`

Bind.o: link/Bind.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Bind.o -MD -MP -MF $(DEPDIR)/Bind.Tpo -c -o Bind.o `test -f 'link/Bind.cpp' || echo '$(srcdir)/'`link/Bind.cpp
	mv -f $(DEPDIR)/Bind.Tpo $(DEPDIR)/Bind.Po
#	source='link/Bind.cpp' object='Bind.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Bind.o `test -f 'link/Bind.cpp' || echo '$(srcdir)/'`link/Bind.cpp

Bind.obj: link/Bind.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Bind.obj -MD -MP -MF $(DEPDIR)/Bind.Tpo -c -o Bind.obj `if test -f 'link/Bind.cpp'; then $(CYGPATH_W) 'link/Bind.cpp'; else $(CYGPATH_W) '$(srcdir)/link/Bind.cpp'; fi`
	mv -f $(DEPDIR)/Bind.Tpo $(DEPDIR)/Bind.Po
#	source='link/Bind.cpp' object='Bind.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Bind.obj `if test -f 'link/Bind.cpp'; then $(CYGPATH_W) 'link/Bind.cpp'; else $(CYGPATH_W) '$(srcdir)/link/Bind.cpp'; fi`

CausalLink.o: link/CausalLink.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CausalLink.o -MD -MP -MF $(DEPDIR)/CausalLink.Tpo -c -o CausalLink.o `test -f 'link/CausalLink.cpp' || echo '$(srcdir)/'`link/CausalLink.cpp
	mv -f $(DEPDIR)/CausalLink.Tpo $(DEPDIR)/CausalLink.Po
#	source='link/CausalLink.cpp' object='CausalLink.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CausalLink.o `test -f 'link/CausalLink.cpp' || echo '$(srcdir)/'`link/CausalLink.cpp

CausalLink.obj: link/CausalLink.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CausalLink.obj -MD -MP -MF $(DEPDIR)/CausalLink.Tpo -c -o CausalLink.obj `if test -f 'link/CausalLink.cpp'; then $(CYGPATH_W) 'link/CausalLink.cpp'; else $(CYGPATH_W) '$(srcdir)/link/CausalLink.cpp'; fi`
	mv -f $(DEPDIR)/CausalLink.Tpo $(DEPDIR)/CausalLink.Po
#	source='link/CausalLink.cpp' object='CausalLink.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CausalLink.obj `if test -f 'link/CausalLink.cpp'; then $(CYGPATH_W) 'link/CausalLink.cpp'; else $(CYGPATH_W) '$(srcdir)/link/CausalLink.cpp'; fi`

Link.o: link/Link.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Link.o -MD -MP -MF $(DEPDIR)/Link.Tpo -c -o Link.o `test -f 'link/Link.cpp' || echo '$(srcdir)/'`link/Link.cpp
	mv -f $(DEPDIR)/Link.Tpo $(DEPDIR)/Link.Po
#	source='link/Link.cpp' object='Link.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Link.o `test -f 'link/Link.cpp' || echo '$(srcdir)/'`link/Link.cpp

Link.obj: link/Link.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Link.obj -MD -MP -MF $(DEPDIR)/Link.Tpo -c -o Link.obj `if test -f 'link/Link.cpp'; then $(CYGPATH_W) 'link/Link.cpp'; else $(CYGPATH_W) '$(srcdir)/link/Link.cpp'; fi`
	mv -f $(DEPDIR)/Link.Tpo $(DEPDIR)/Link.Po
#	source='link/Link.cpp' object='Link.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Link.obj `if test -f 'link/Link.cpp'; then $(CYGPATH_W) 'link/Link.cpp'; else $(CYGPATH_W) '$(srcdir)/link/Link.cpp'; fi`

LayoutRegion.o: layout/LayoutRegion.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LayoutRegion.o -MD -MP -MF $(DEPDIR)/LayoutRegion.Tpo -c -o LayoutRegion.o `test -f 'layout/LayoutRegion.cpp' || echo '$(srcdir)/'`layout/LayoutRegion.cpp
	mv -f $(DEPDIR)/LayoutRegion.Tpo $(DEPDIR)/LayoutRegion.Po
#	source='layout/LayoutRegion.cpp' object='LayoutRegion.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LayoutRegion.o `test -f 'layout/LayoutRegion.cpp' || echo '$(srcdir)/'`layout/LayoutRegion.cpp

LayoutRegion.obj: layout/LayoutRegion.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LayoutRegion.obj -MD -MP -MF $(DEPDIR)/LayoutRegion.Tpo -c -o LayoutRegion.obj `if test -f 'layout/LayoutRegion.cpp'; then $(CYGPATH_W) 'layout/LayoutRegion.cpp'; else $(CYGPATH_W) '$(srcdir)/layout/LayoutRegion.cpp'; fi`
	mv -f $(DEPDIR)/LayoutRegion.Tpo $(DEPDIR)/LayoutRegion.Po
#	source='layout/LayoutRegion.cpp' object='LayoutRegion.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LayoutRegion.obj `if test -f 'layout/LayoutRegion.cpp'; then $(CYGPATH_W) 'layout/LayoutRegion.cpp'; else $(CYGPATH_W) '$(srcdir)/layout/LayoutRegion.cpp'; fi`

DeviceLayout.o: layout/DeviceLayout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DeviceLayout.o -MD -MP -MF $(DEPDIR)/DeviceLayout.Tpo -c -o DeviceLayout.o `test -f 'layout/DeviceLayout.cpp' || echo '$(srcdir)/'`layout/DeviceLayout.cpp
	mv -f $(DEPDIR)/DeviceLayout.Tpo $(DEPDIR)/DeviceLayout.Po
#	source='layout/DeviceLayout.cpp' object='DeviceLayout.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DeviceLayout.o `test -f 'layout/DeviceLayout.cpp' || echo '$(srcdir)/'`layout/DeviceLayout.cpp

DeviceLayout.obj: layout/DeviceLayout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DeviceLayout.obj -MD -MP -MF $(DEPDIR)/DeviceLayout.Tpo -c -o DeviceLayout.obj `if test -f 'layout/DeviceLayout.cpp'; then $(CYGPATH_W) 'layout/DeviceLayout.cpp'; else $(CYGPATH_W) '$(srcdir)/layout/DeviceLayout.cpp'; fi`
	mv -f $(DEPDIR)/DeviceLayout.Tpo $(DEPDIR)/DeviceLayout.Po
#	source='layout/DeviceLayout.cpp' object='DeviceLayout.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DeviceLayout.obj `if test -f 'layout/DeviceLayout.cpp'; then $(CYGPATH_W) 'layout/DeviceLayout.cpp'; else $(CYGPATH_W) '$(srcdir)/layout/DeviceLayout.cpp'; fi`

RegionBase.o: layout/RegionBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RegionBase.o -MD -MP -MF $(DEPDIR)/RegionBase.Tpo -c -o RegionBase.o `test -f 'layout/RegionBase.cpp' || echo '$(srcdir)/'`layout/RegionBase.cpp
	mv -f $(DEPDIR)/RegionBase.Tpo $(DEPDIR)/RegionBase.Po
#	source='layout/RegionBase.cpp' object='RegionBase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RegionBase.o `test -f 'layout/RegionBase.cpp' || echo '$(srcdir)/'`layout/RegionBase.cpp

RegionBase.obj: layout/RegionBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RegionBase.obj -MD -MP -MF $(DEPDIR)/RegionBase.Tpo -c -o RegionBase.obj `if test -f 'layout/RegionBase.cpp'; then $(CYGPATH_W) 'layout/RegionBase.cpp'; else $(CYGPATH_W) '$(srcdir)/layout/RegionBase.cpp'; fi`
	mv -f $(DEPDIR)/RegionBase.Tpo $(DEPDIR)/RegionBase.Po
#	source='layout/RegionBase.cpp' object='RegionBase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RegionBase.obj `if test -f 'layout/RegionBase.cpp'; then $(CYGPATH_W) 'layout/RegionBase.cpp'; else $(CYGPATH_W) '$(srcdir)/layout/RegionBase.cpp'; fi`

Anchor.o: interfaces/Anchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Anchor.o -MD -MP -MF $(DEPDIR)/Anchor.Tpo -c -o Anchor.o `test -f 'interfaces/Anchor.cpp' || echo '$(srcdir)/'`interfaces/Anchor.cpp
	mv -f $(DEPDIR)/Anchor.Tpo $(DEPDIR)/Anchor.Po
#	source='interfaces/Anchor.cpp' object='Anchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Anchor.o `test -f 'interfaces/Anchor.cpp' || echo '$(srcdir)/'`interfaces/Anchor.cpp

Anchor.obj: interfaces/Anchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Anchor.obj -MD -MP -MF $(DEPDIR)/Anchor.Tpo -c -o Anchor.obj `if test -f 'interfaces/Anchor.cpp'; then $(CYGPATH_W) 'interfaces/Anchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/Anchor.cpp'; fi`
	mv -f $(DEPDIR)/Anchor.Tpo $(DEPDIR)/Anchor.Po
#	source='interfaces/Anchor.cpp' object='Anchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Anchor.obj `if test -f 'interfaces/Anchor.cpp'; then $(CYGPATH_W) 'interfaces/Anchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/Anchor.cpp'; fi`

CircleSpatialAnchor.o: interfaces/CircleSpatialAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CircleSpatialAnchor.o -MD -MP -MF $(DEPDIR)/CircleSpatialAnchor.Tpo -c -o CircleSpatialAnchor.o `test -f 'interfaces/CircleSpatialAnchor.cpp' || echo '$(srcdir)/'`interfaces/CircleSpatialAnchor.cpp
	mv -f $(DEPDIR)/CircleSpatialAnchor.Tpo $(DEPDIR)/CircleSpatialAnchor.Po
#	source='interfaces/CircleSpatialAnchor.cpp' object='CircleSpatialAnchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CircleSpatialAnchor.o `test -f 'interfaces/CircleSpatialAnchor.cpp' || echo '$(srcdir)/'`interfaces/CircleSpatialAnchor.cpp

CircleSpatialAnchor.obj: interfaces/CircleSpatialAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CircleSpatialAnchor.obj -MD -MP -MF $(DEPDIR)/CircleSpatialAnchor.Tpo -c -o CircleSpatialAnchor.obj `if test -f 'interfaces/CircleSpatialAnchor.cpp'; then $(CYGPATH_W) 'interfaces/CircleSpatialAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/CircleSpatialAnchor.cpp'; fi`
	mv -f $(DEPDIR)/CircleSpatialAnchor.Tpo $(DEPDIR)/CircleSpatialAnchor.Po
#	source='interfaces/CircleSpatialAnchor.cpp' object='CircleSpatialAnchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CircleSpatialAnchor.obj `if test -f 'interfaces/CircleSpatialAnchor.cpp'; then $(CYGPATH_W) 'interfaces/CircleSpatialAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/CircleSpatialAnchor.cpp'; fi`

ContentAnchor.o: interfaces/ContentAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContentAnchor.o -MD -MP -MF $(DEPDIR)/ContentAnchor.Tpo -c -o ContentAnchor.o `test -f 'interfaces/ContentAnchor.cpp' || echo '$(srcdir)/'`interfaces/ContentAnchor.cpp
	mv -f $(DEPDIR)/ContentAnchor.Tpo $(DEPDIR)/ContentAnchor.Po
#	source='interfaces/ContentAnchor.cpp' object='ContentAnchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContentAnchor.o `test -f 'interfaces/ContentAnchor.cpp' || echo '$(srcdir)/'`interfaces/ContentAnchor.cpp

ContentAnchor.obj: interfaces/ContentAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContentAnchor.obj -MD -MP -MF $(DEPDIR)/ContentAnchor.Tpo -c -o ContentAnchor.obj `if test -f 'interfaces/ContentAnchor.cpp'; then $(CYGPATH_W) 'interfaces/ContentAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/ContentAnchor.cpp'; fi`
	mv -f $(DEPDIR)/ContentAnchor.Tpo $(DEPDIR)/ContentAnchor.Po
#	source='interfaces/ContentAnchor.cpp' object='ContentAnchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContentAnchor.obj `if test -f 'interfaces/ContentAnchor.cpp'; then $(CYGPATH_W) 'interfaces/ContentAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/ContentAnchor.cpp'; fi`

IntervalAnchor.o: interfaces/IntervalAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT IntervalAnchor.o -MD -MP -MF $(DEPDIR)/IntervalAnchor.Tpo -c -o IntervalAnchor.o `test -f 'interfaces/IntervalAnchor.cpp' || echo '$(srcdir)/'`interfaces/IntervalAnchor.cpp
	mv -f $(DEPDIR)/IntervalAnchor.Tpo $(DEPDIR)/IntervalAnchor.Po
#	source='interfaces/IntervalAnchor.cpp' object='IntervalAnchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o IntervalAnchor.o `test -f 'interfaces/IntervalAnchor.cpp' || echo '$(srcdir)/'`interfaces/IntervalAnchor.cpp

IntervalAnchor.obj: interfaces/IntervalAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT IntervalAnchor.obj -MD -MP -MF $(DEPDIR)/IntervalAnchor.Tpo -c -o IntervalAnchor.obj `if test -f 'interfaces/IntervalAnchor.cpp'; then $(CYGPATH_W) 'interfaces/IntervalAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/IntervalAnchor.cpp'; fi`
	mv -f $(DEPDIR)/IntervalAnchor.Tpo $(DEPDIR)/IntervalAnchor.Po
#	source='interfaces/IntervalAnchor.cpp' object='IntervalAnchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o IntervalAnchor.obj `if test -f 'interfaces/IntervalAnchor.cpp'; then $(CYGPATH_W) 'interfaces/IntervalAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/IntervalAnchor.cpp'; fi`

LabeledAnchor.o: interfaces/LabeledAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LabeledAnchor.o -MD -MP -MF $(DEPDIR)/LabeledAnchor.Tpo -c -o LabeledAnchor.o `test -f 'interfaces/LabeledAnchor.cpp' || echo '$(srcdir)/'`interfaces/LabeledAnchor.cpp
	mv -f $(DEPDIR)/LabeledAnchor.Tpo $(DEPDIR)/LabeledAnchor.Po
#	source='interfaces/LabeledAnchor.cpp' object='LabeledAnchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LabeledAnchor.o `test -f 'interfaces/LabeledAnchor.cpp' || echo '$(srcdir)/'`interfaces/LabeledAnchor.cpp

LabeledAnchor.obj: interfaces/LabeledAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LabeledAnchor.obj -MD -MP -MF $(DEPDIR)/LabeledAnchor.Tpo -c -o LabeledAnchor.obj `if test -f 'interfaces/LabeledAnchor.cpp'; then $(CYGPATH_W) 'interfaces/LabeledAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/LabeledAnchor.cpp'; fi`
	mv -f $(DEPDIR)/LabeledAnchor.Tpo $(DEPDIR)/LabeledAnchor.Po
#	source='interfaces/LabeledAnchor.cpp' object='LabeledAnchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LabeledAnchor.obj `if test -f 'interfaces/LabeledAnchor.cpp'; then $(CYGPATH_W) 'interfaces/LabeledAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/LabeledAnchor.cpp'; fi`

LambdaAnchor.o: interfaces/LambdaAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LambdaAnchor.o -MD -MP -MF $(DEPDIR)/LambdaAnchor.Tpo -c -o LambdaAnchor.o `test -f 'interfaces/LambdaAnchor.cpp' || echo '$(srcdir)/'`interfaces/LambdaAnchor.cpp
	mv -f $(DEPDIR)/LambdaAnchor.Tpo $(DEPDIR)/LambdaAnchor.Po
#	source='interfaces/LambdaAnchor.cpp' object='LambdaAnchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LambdaAnchor.o `test -f 'interfaces/LambdaAnchor.cpp' || echo '$(srcdir)/'`interfaces/LambdaAnchor.cpp

LambdaAnchor.obj: interfaces/LambdaAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LambdaAnchor.obj -MD -MP -MF $(DEPDIR)/LambdaAnchor.Tpo -c -o LambdaAnchor.obj `if test -f 'interfaces/LambdaAnchor.cpp'; then $(CYGPATH_W) 'interfaces/LambdaAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/LambdaAnchor.cpp'; fi`
	mv -f $(DEPDIR)/LambdaAnchor.Tpo $(DEPDIR)/LambdaAnchor.Po
#	source='interfaces/LambdaAnchor.cpp' object='LambdaAnchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LambdaAnchor.obj `if test -f 'interfaces/LambdaAnchor.cpp'; then $(CYGPATH_W) 'interfaces/LambdaAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/LambdaAnchor.cpp'; fi`

Port.o: interfaces/Port.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Port.o -MD -MP -MF $(DEPDIR)/Port.Tpo -c -o Port.o `test -f 'interfaces/Port.cpp' || echo '$(srcdir)/'`interfaces/Port.cpp
	mv -f $(DEPDIR)/Port.Tpo $(DEPDIR)/Port.Po
#	source='interfaces/Port.cpp' object='Port.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Port.o `test -f 'interfaces/Port.cpp' || echo '$(srcdir)/'`interfaces/Port.cpp

Port.obj: interfaces/Port.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Port.obj -MD -MP -MF $(DEPDIR)/Port.Tpo -c -o Port.obj `if test -f 'interfaces/Port.cpp'; then $(CYGPATH_W) 'interfaces/Port.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/Port.cpp'; fi`
	mv -f $(DEPDIR)/Port.Tpo $(DEPDIR)/Port.Po
#	source='interfaces/Port.cpp' object='Port.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Port.obj `if test -f 'interfaces/Port.cpp'; then $(CYGPATH_W) 'interfaces/Port.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/Port.cpp'; fi`

PropertyAnchor.o: interfaces/PropertyAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PropertyAnchor.o -MD -MP -MF $(DEPDIR)/PropertyAnchor.Tpo -c -o PropertyAnchor.o `test -f 'interfaces/PropertyAnchor.cpp' || echo '$(srcdir)/'`interfaces/PropertyAnchor.cpp
	mv -f $(DEPDIR)/PropertyAnchor.Tpo $(DEPDIR)/PropertyAnchor.Po
#	source='interfaces/PropertyAnchor.cpp' object='PropertyAnchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PropertyAnchor.o `test -f 'interfaces/PropertyAnchor.cpp' || echo '$(srcdir)/'`interfaces/PropertyAnchor.cpp

PropertyAnchor.obj: interfaces/PropertyAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PropertyAnchor.obj -MD -MP -MF $(DEPDIR)/PropertyAnchor.Tpo -c -o PropertyAnchor.obj `if test -f 'interfaces/PropertyAnchor.cpp'; then $(CYGPATH_W) 'interfaces/PropertyAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/PropertyAnchor.cpp'; fi`
	mv -f $(DEPDIR)/PropertyAnchor.Tpo $(DEPDIR)/PropertyAnchor.Po
#	source='interfaces/PropertyAnchor.cpp' object='PropertyAnchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PropertyAnchor.obj `if test -f 'interfaces/PropertyAnchor.cpp'; then $(CYGPATH_W) 'interfaces/PropertyAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/PropertyAnchor.cpp'; fi`

RectangleSpatialAnchor.o: interfaces/RectangleSpatialAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RectangleSpatialAnchor.o -MD -MP -MF $(DEPDIR)/RectangleSpatialAnchor.Tpo -c -o RectangleSpatialAnchor.o `test -f 'interfaces/RectangleSpatialAnchor.cpp' || echo '$(srcdir)/'`interfaces/RectangleSpatialAnchor.cpp
	mv -f $(DEPDIR)/RectangleSpatialAnchor.Tpo $(DEPDIR)/RectangleSpatialAnchor.Po
#	source='interfaces/RectangleSpatialAnchor.cpp' object='RectangleSpatialAnchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RectangleSpatialAnchor.o `test -f 'interfaces/RectangleSpatialAnchor.cpp' || echo '$(srcdir)/'`interfaces/RectangleSpatialAnchor.cpp

RectangleSpatialAnchor.obj: interfaces/RectangleSpatialAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RectangleSpatialAnchor.obj -MD -MP -MF $(DEPDIR)/RectangleSpatialAnchor.Tpo -c -o RectangleSpatialAnchor.obj `if test -f 'interfaces/RectangleSpatialAnchor.cpp'; then $(CYGPATH_W) 'interfaces/RectangleSpatialAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/RectangleSpatialAnchor.cpp'; fi`
	mv -f $(DEPDIR)/RectangleSpatialAnchor.Tpo $(DEPDIR)/RectangleSpatialAnchor.Po
#	source='interfaces/RectangleSpatialAnchor.cpp' object='RectangleSpatialAnchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RectangleSpatialAnchor.obj `if test -f 'interfaces/RectangleSpatialAnchor.cpp'; then $(CYGPATH_W) 'interfaces/RectangleSpatialAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/RectangleSpatialAnchor.cpp'; fi`

RelativeTimeIntervalAnchor.o: interfaces/RelativeTimeIntervalAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RelativeTimeIntervalAnchor.o -MD -MP -MF $(DEPDIR)/RelativeTimeIntervalAnchor.Tpo -c -o RelativeTimeIntervalAnchor.o `test -f 'interfaces/RelativeTimeIntervalAnchor.cpp' || echo '$(srcdir)/'`interfaces/RelativeTimeIntervalAnchor.cpp
	mv -f $(DEPDIR)/RelativeTimeIntervalAnchor.Tpo $(DEPDIR)/RelativeTimeIntervalAnchor.Po
#	source='interfaces/RelativeTimeIntervalAnchor.cpp' object='RelativeTimeIntervalAnchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RelativeTimeIntervalAnchor.o `test -f 'interfaces/RelativeTimeIntervalAnchor.cpp' || echo '$(srcdir)/'`interfaces/RelativeTimeIntervalAnchor.cpp

RelativeTimeIntervalAnchor.obj: interfaces/RelativeTimeIntervalAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RelativeTimeIntervalAnchor.obj -MD -MP -MF $(DEPDIR)/RelativeTimeIntervalAnchor.Tpo -c -o RelativeTimeIntervalAnchor.obj `if test -f 'interfaces/RelativeTimeIntervalAnchor.cpp'; then $(CYGPATH_W) 'interfaces/RelativeTimeIntervalAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/RelativeTimeIntervalAnchor.cpp'; fi`
	mv -f $(DEPDIR)/RelativeTimeIntervalAnchor.Tpo $(DEPDIR)/RelativeTimeIntervalAnchor.Po
#	source='interfaces/RelativeTimeIntervalAnchor.cpp' object='RelativeTimeIntervalAnchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RelativeTimeIntervalAnchor.obj `if test -f 'interfaces/RelativeTimeIntervalAnchor.cpp'; then $(CYGPATH_W) 'interfaces/RelativeTimeIntervalAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/RelativeTimeIntervalAnchor.cpp'; fi`

SampleIntervalAnchor.o: interfaces/SampleIntervalAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SampleIntervalAnchor.o -MD -MP -MF $(DEPDIR)/SampleIntervalAnchor.Tpo -c -o SampleIntervalAnchor.o `test -f 'interfaces/SampleIntervalAnchor.cpp' || echo '$(srcdir)/'`interfaces/SampleIntervalAnchor.cpp
	mv -f $(DEPDIR)/SampleIntervalAnchor.Tpo $(DEPDIR)/SampleIntervalAnchor.Po
#	source='interfaces/SampleIntervalAnchor.cpp' object='SampleIntervalAnchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SampleIntervalAnchor.o `test -f 'interfaces/SampleIntervalAnchor.cpp' || echo '$(srcdir)/'`interfaces/SampleIntervalAnchor.cpp

SampleIntervalAnchor.obj: interfaces/SampleIntervalAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SampleIntervalAnchor.obj -MD -MP -MF $(DEPDIR)/SampleIntervalAnchor.Tpo -c -o SampleIntervalAnchor.obj `if test -f 'interfaces/SampleIntervalAnchor.cpp'; then $(CYGPATH_W) 'interfaces/SampleIntervalAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/SampleIntervalAnchor.cpp'; fi`
	mv -f $(DEPDIR)/SampleIntervalAnchor.Tpo $(DEPDIR)/SampleIntervalAnchor.Po
#	source='interfaces/SampleIntervalAnchor.cpp' object='SampleIntervalAnchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SampleIntervalAnchor.obj `if test -f 'interfaces/SampleIntervalAnchor.cpp'; then $(CYGPATH_W) 'interfaces/SampleIntervalAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/SampleIntervalAnchor.cpp'; fi`

SwitchPort.o: interfaces/SwitchPort.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SwitchPort.o -MD -MP -MF $(DEPDIR)/SwitchPort.Tpo -c -o SwitchPort.o `test -f 'interfaces/SwitchPort.cpp' || echo '$(srcdir)/'`interfaces/SwitchPort.cpp
	mv -f $(DEPDIR)/SwitchPort.Tpo $(DEPDIR)/SwitchPort.Po
#	source='interfaces/SwitchPort.cpp' object='SwitchPort.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SwitchPort.o `test -f 'interfaces/SwitchPort.cpp' || echo '$(srcdir)/'`interfaces/SwitchPort.cpp

SwitchPort.obj: interfaces/SwitchPort.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SwitchPort.obj -MD -MP -MF $(DEPDIR)/SwitchPort.Tpo -c -o SwitchPort.obj `if test -f 'interfaces/SwitchPort.cpp'; then $(CYGPATH_W) 'interfaces/SwitchPort.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/SwitchPort.cpp'; fi`
	mv -f $(DEPDIR)/SwitchPort.Tpo $(DEPDIR)/SwitchPort.Po
#	source='interfaces/SwitchPort.cpp' object='SwitchPort.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SwitchPort.obj `if test -f 'interfaces/SwitchPort.cpp'; then $(CYGPATH_W) 'interfaces/SwitchPort.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/SwitchPort.cpp'; fi`

TextAnchor.o: interfaces/TextAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TextAnchor.o -MD -MP -MF $(DEPDIR)/TextAnchor.Tpo -c -o TextAnchor.o `test -f 'interfaces/TextAnchor.cpp' || echo '$(srcdir)/'`interfaces/TextAnchor.cpp
	mv -f $(DEPDIR)/TextAnchor.Tpo $(DEPDIR)/TextAnchor.Po
#	source='interfaces/TextAnchor.cpp' object='TextAnchor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TextAnchor.o `test -f 'interfaces/TextAnchor.cpp' || echo '$(srcdir)/'`interfaces/TextAnchor.cpp

TextAnchor.obj: interfaces/TextAnchor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TextAnchor.obj -MD -MP -MF $(DEPDIR)/TextAnchor.Tpo -c -o TextAnchor.obj `if test -f 'interfaces/TextAnchor.cpp'; then $(CYGPATH_W) 'interfaces/TextAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/TextAnchor.cpp'; fi`
	mv -f $(DEPDIR)/TextAnchor.Tpo $(DEPDIR)/TextAnchor.Po
#	source='interfaces/TextAnchor.cpp' object='TextAnchor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TextAnchor.obj `if test -f 'interfaces/TextAnchor.cpp'; then $(CYGPATH_W) 'interfaces/TextAnchor.cpp'; else $(CYGPATH_W) '$(srcdir)/interfaces/TextAnchor.cpp'; fi`

Descriptor.o: descriptor/Descriptor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Descriptor.o -MD -MP -MF $(DEPDIR)/Descriptor.Tpo -c -o Descriptor.o `test -f 'descriptor/Descriptor.cpp' || echo '$(srcdir)/'`descriptor/Descriptor.cpp
	mv -f $(DEPDIR)/Descriptor.Tpo $(DEPDIR)/Descriptor.Po
#	source='descriptor/Descriptor.cpp' object='Descriptor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Descriptor.o `test -f 'descriptor/Descriptor.cpp' || echo '$(srcdir)/'`descriptor/Descriptor.cpp

Descriptor.obj: descriptor/Descriptor.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Descriptor.obj -MD -MP -MF $(DEPDIR)/Descriptor.Tpo -c -o Descriptor.obj `if test -f 'descriptor/Descriptor.cpp'; then $(CYGPATH_W) 'descriptor/Descriptor.cpp'; else $(CYGPATH_W) '$(srcdir)/descriptor/Descriptor.cpp'; fi`
	mv -f $(DEPDIR)/Descriptor.Tpo $(DEPDIR)/Descriptor.Po
#	source='descriptor/Descriptor.cpp' object='Descriptor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Descriptor.obj `if test -f 'descriptor/Descriptor.cpp'; then $(CYGPATH_W) 'descriptor/Descriptor.cpp'; else $(CYGPATH_W) '$(srcdir)/descriptor/Descriptor.cpp'; fi`

DescriptorBase.o: descriptor/DescriptorBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DescriptorBase.o -MD -MP -MF $(DEPDIR)/DescriptorBase.Tpo -c -o DescriptorBase.o `test -f 'descriptor/DescriptorBase.cpp' || echo '$(srcdir)/'`descriptor/DescriptorBase.cpp
	mv -f $(DEPDIR)/DescriptorBase.Tpo $(DEPDIR)/DescriptorBase.Po
#	source='descriptor/DescriptorBase.cpp' object='DescriptorBase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DescriptorBase.o `test -f 'descriptor/DescriptorBase.cpp' || echo '$(srcdir)/'`descriptor/DescriptorBase.cpp

DescriptorBase.obj: descriptor/DescriptorBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DescriptorBase.obj -MD -MP -MF $(DEPDIR)/DescriptorBase.Tpo -c -o DescriptorBase.obj `if test -f 'descriptor/DescriptorBase.cpp'; then $(CYGPATH_W) 'descriptor/DescriptorBase.cpp'; else $(CYGPATH_W) '$(srcdir)/descriptor/DescriptorBase.cpp'; fi`
	mv -f $(DEPDIR)/DescriptorBase.Tpo $(DEPDIR)/DescriptorBase.Po
#	source='descriptor/DescriptorBase.cpp' object='DescriptorBase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DescriptorBase.obj `if test -f 'descriptor/DescriptorBase.cpp'; then $(CYGPATH_W) 'descriptor/DescriptorBase.cpp'; else $(CYGPATH_W) '$(srcdir)/descriptor/DescriptorBase.cpp'; fi`

Action.o: connectors/Action.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Action.o -MD -MP -MF $(DEPDIR)/Action.Tpo -c -o Action.o `test -f 'connectors/Action.cpp' || echo '$(srcdir)/'`connectors/Action.cpp
	mv -f $(DEPDIR)/Action.Tpo $(DEPDIR)/Action.Po
#	source='connectors/Action.cpp' object='Action.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Action.o `test -f 'connectors/Action.cpp' || echo '$(srcdir)/'`connectors/Action.cpp

Action.obj: connectors/Action.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Action.obj -MD -MP -MF $(DEPDIR)/Action.Tpo -c -o Action.obj `if test -f 'connectors/Action.cpp'; then $(CYGPATH_W) 'connectors/Action.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/Action.cpp'; fi`
	mv -f $(DEPDIR)/Action.Tpo $(DEPDIR)/Action.Po
#	source='connectors/Action.cpp' object='Action.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Action.obj `if test -f 'connectors/Action.cpp'; then $(CYGPATH_W) 'connectors/Action.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/Action.cpp'; fi`

AssessmentStatement.o: connectors/AssessmentStatement.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AssessmentStatement.o -MD -MP -MF $(DEPDIR)/AssessmentStatement.Tpo -c -o AssessmentStatement.o `test -f 'connectors/AssessmentStatement.cpp' || echo '$(srcdir)/'`connectors/AssessmentStatement.cpp
	mv -f $(DEPDIR)/AssessmentStatement.Tpo $(DEPDIR)/AssessmentStatement.Po
#	source='connectors/AssessmentStatement.cpp' object='AssessmentStatement.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AssessmentStatement.o `test -f 'connectors/AssessmentStatement.cpp' || echo '$(srcdir)/'`connectors/AssessmentStatement.cpp

AssessmentStatement.obj: connectors/AssessmentStatement.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AssessmentStatement.obj -MD -MP -MF $(DEPDIR)/AssessmentStatement.Tpo -c -o AssessmentStatement.obj `if test -f 'connectors/AssessmentStatement.cpp'; then $(CYGPATH_W) 'connectors/AssessmentStatement.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/AssessmentStatement.cpp'; fi`
	mv -f $(DEPDIR)/AssessmentStatement.Tpo $(DEPDIR)/AssessmentStatement.Po
#	source='connectors/AssessmentStatement.cpp' object='AssessmentStatement.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AssessmentStatement.obj `if test -f 'connectors/AssessmentStatement.cpp'; then $(CYGPATH_W) 'connectors/AssessmentStatement.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/AssessmentStatement.cpp'; fi`

AttributeAssessment.o: connectors/AttributeAssessment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AttributeAssessment.o -MD -MP -MF $(DEPDIR)/AttributeAssessment.Tpo -c -o AttributeAssessment.o `test -f 'connectors/AttributeAssessment.cpp' || echo '$(srcdir)/'`connectors/AttributeAssessment.cpp
	mv -f $(DEPDIR)/AttributeAssessment.Tpo $(DEPDIR)/AttributeAssessment.Po
#	source='connectors/AttributeAssessment.cpp' object='AttributeAssessment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AttributeAssessment.o `test -f 'connectors/AttributeAssessment.cpp' || echo '$(srcdir)/'`connectors/AttributeAssessment.cpp

AttributeAssessment.obj: connectors/AttributeAssessment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AttributeAssessment.obj -MD -MP -MF $(DEPDIR)/AttributeAssessment.Tpo -c -o AttributeAssessment.obj `if test -f 'connectors/AttributeAssessment.cpp'; then $(CYGPATH_W) 'connectors/AttributeAssessment.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/AttributeAssessment.cpp'; fi`
	mv -f $(DEPDIR)/AttributeAssessment.Tpo $(DEPDIR)/AttributeAssessment.Po
#	source='connectors/AttributeAssessment.cpp' object='AttributeAssessment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AttributeAssessment.obj `if test -f 'connectors/AttributeAssessment.cpp'; then $(CYGPATH_W) 'connectors/AttributeAssessment.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/AttributeAssessment.cpp'; fi`

CausalConnector.o: connectors/CausalConnector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CausalConnector.o -MD -MP -MF $(DEPDIR)/CausalConnector.Tpo -c -o CausalConnector.o `test -f 'connectors/CausalConnector.cpp' || echo '$(srcdir)/'`connectors/CausalConnector.cpp
	mv -f $(DEPDIR)/CausalConnector.Tpo $(DEPDIR)/CausalConnector.Po
#	source='connectors/CausalConnector.cpp' object='CausalConnector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CausalConnector.o `test -f 'connectors/CausalConnector.cpp' || echo '$(srcdir)/'`connectors/CausalConnector.cpp

CausalConnector.obj: connectors/CausalConnector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CausalConnector.obj -MD -MP -MF $(DEPDIR)/CausalConnector.Tpo -c -o CausalConnector.obj `if test -f 'connectors/CausalConnector.cpp'; then $(CYGPATH_W) 'connectors/CausalConnector.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/CausalConnector.cpp'; fi`
	mv -f $(DEPDIR)/CausalConnector.Tpo $(DEPDIR)/CausalConnector.Po
#	source='connectors/CausalConnector.cpp' object='CausalConnector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CausalConnector.obj `if test -f 'connectors/CausalConnector.cpp'; then $(CYGPATH_W) 'connectors/CausalConnector.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/CausalConnector.cpp'; fi`

CompoundAction.o: connectors/CompoundAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompoundAction.o -MD -MP -MF $(DEPDIR)/CompoundAction.Tpo -c -o CompoundAction.o `test -f 'connectors/CompoundAction.cpp' || echo '$(srcdir)/'`connectors/CompoundAction.cpp
	mv -f $(DEPDIR)/CompoundAction.Tpo $(DEPDIR)/CompoundAction.Po
#	source='connectors/CompoundAction.cpp' object='CompoundAction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompoundAction.o `test -f 'connectors/CompoundAction.cpp' || echo '$(srcdir)/'`connectors/CompoundAction.cpp

CompoundAction.obj: connectors/CompoundAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompoundAction.obj -MD -MP -MF $(DEPDIR)/CompoundAction.Tpo -c -o CompoundAction.obj `if test -f 'connectors/CompoundAction.cpp'; then $(CYGPATH_W) 'connectors/CompoundAction.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/CompoundAction.cpp'; fi`
	mv -f $(DEPDIR)/CompoundAction.Tpo $(DEPDIR)/CompoundAction.Po
#	source='connectors/CompoundAction.cpp' object='CompoundAction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompoundAction.obj `if test -f 'connectors/CompoundAction.cpp'; then $(CYGPATH_W) 'connectors/CompoundAction.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/CompoundAction.cpp'; fi`

CompoundCondition.o: connectors/CompoundCondition.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompoundCondition.o -MD -MP -MF $(DEPDIR)/CompoundCondition.Tpo -c -o CompoundCondition.o `test -f 'connectors/CompoundCondition.cpp' || echo '$(srcdir)/'`connectors/CompoundCondition.cpp
	mv -f $(DEPDIR)/CompoundCondition.Tpo $(DEPDIR)/CompoundCondition.Po
#	source='connectors/CompoundCondition.cpp' object='CompoundCondition.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompoundCondition.o `test -f 'connectors/CompoundCondition.cpp' || echo '$(srcdir)/'`connectors/CompoundCondition.cpp

CompoundCondition.obj: connectors/CompoundCondition.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompoundCondition.obj -MD -MP -MF $(DEPDIR)/CompoundCondition.Tpo -c -o CompoundCondition.obj `if test -f 'connectors/CompoundCondition.cpp'; then $(CYGPATH_W) 'connectors/CompoundCondition.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/CompoundCondition.cpp'; fi`
	mv -f $(DEPDIR)/CompoundCondition.Tpo $(DEPDIR)/CompoundCondition.Po
#	source='connectors/CompoundCondition.cpp' object='CompoundCondition.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompoundCondition.obj `if test -f 'connectors/CompoundCondition.cpp'; then $(CYGPATH_W) 'connectors/CompoundCondition.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/CompoundCondition.cpp'; fi`

CompoundStatement.o: connectors/CompoundStatement.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompoundStatement.o -MD -MP -MF $(DEPDIR)/CompoundStatement.Tpo -c -o CompoundStatement.o `test -f 'connectors/CompoundStatement.cpp' || echo '$(srcdir)/'`connectors/CompoundStatement.cpp
	mv -f $(DEPDIR)/CompoundStatement.Tpo $(DEPDIR)/CompoundStatement.Po
#	source='connectors/CompoundStatement.cpp' object='CompoundStatement.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompoundStatement.o `test -f 'connectors/CompoundStatement.cpp' || echo '$(srcdir)/'`connectors/CompoundStatement.cpp

CompoundStatement.obj: connectors/CompoundStatement.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompoundStatement.obj -MD -MP -MF $(DEPDIR)/CompoundStatement.Tpo -c -o CompoundStatement.obj `if test -f 'connectors/CompoundStatement.cpp'; then $(CYGPATH_W) 'connectors/CompoundStatement.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/CompoundStatement.cpp'; fi`
	mv -f $(DEPDIR)/CompoundStatement.Tpo $(DEPDIR)/CompoundStatement.Po
#	source='connectors/CompoundStatement.cpp' object='CompoundStatement.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompoundStatement.obj `if test -f 'connectors/CompoundStatement.cpp'; then $(CYGPATH_W) 'connectors/CompoundStatement.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/CompoundStatement.cpp'; fi`

Connector.o: connectors/Connector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Connector.o -MD -MP -MF $(DEPDIR)/Connector.Tpo -c -o Connector.o `test -f 'connectors/Connector.cpp' || echo '$(srcdir)/'`connectors/Connector.cpp
	mv -f $(DEPDIR)/Connector.Tpo $(DEPDIR)/Connector.Po
#	source='connectors/Connector.cpp' object='Connector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Connector.o `test -f 'connectors/Connector.cpp' || echo '$(srcdir)/'`connectors/Connector.cpp

Connector.obj: connectors/Connector.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Connector.obj -MD -MP -MF $(DEPDIR)/Connector.Tpo -c -o Connector.obj `if test -f 'connectors/Connector.cpp'; then $(CYGPATH_W) 'connectors/Connector.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/Connector.cpp'; fi`
	mv -f $(DEPDIR)/Connector.Tpo $(DEPDIR)/Connector.Po
#	source='connectors/Connector.cpp' object='Connector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Connector.obj `if test -f 'connectors/Connector.cpp'; then $(CYGPATH_W) 'connectors/Connector.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/Connector.cpp'; fi`

ConnectorBase.o: connectors/ConnectorBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConnectorBase.o -MD -MP -MF $(DEPDIR)/ConnectorBase.Tpo -c -o ConnectorBase.o `test -f 'connectors/ConnectorBase.cpp' || echo '$(srcdir)/'`connectors/ConnectorBase.cpp
	mv -f $(DEPDIR)/ConnectorBase.Tpo $(DEPDIR)/ConnectorBase.Po
#	source='connectors/ConnectorBase.cpp' object='ConnectorBase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConnectorBase.o `test -f 'connectors/ConnectorBase.cpp' || echo '$(srcdir)/'`connectors/ConnectorBase.cpp

ConnectorBase.obj: connectors/ConnectorBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConnectorBase.obj -MD -MP -MF $(DEPDIR)/ConnectorBase.Tpo -c -o ConnectorBase.obj `if test -f 'connectors/ConnectorBase.cpp'; then $(CYGPATH_W) 'connectors/ConnectorBase.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/ConnectorBase.cpp'; fi`
	mv -f $(DEPDIR)/ConnectorBase.Tpo $(DEPDIR)/ConnectorBase.Po
#	source='connectors/ConnectorBase.cpp' object='ConnectorBase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConnectorBase.obj `if test -f 'connectors/ConnectorBase.cpp'; then $(CYGPATH_W) 'connectors/ConnectorBase.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/ConnectorBase.cpp'; fi`

EventTransitionAssessment.o: connectors/EventTransitionAssessment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EventTransitionAssessment.o -MD -MP -MF $(DEPDIR)/EventTransitionAssessment.Tpo -c -o EventTransitionAssessment.o `test -f 'connectors/EventTransitionAssessment.cpp' || echo '$(srcdir)/'`connectors/EventTransitionAssessment.cpp
	mv -f $(DEPDIR)/EventTransitionAssessment.Tpo $(DEPDIR)/EventTransitionAssessment.Po
#	source='connectors/EventTransitionAssessment.cpp' object='EventTransitionAssessment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EventTransitionAssessment.o `test -f 'connectors/EventTransitionAssessment.cpp' || echo '$(srcdir)/'`connectors/EventTransitionAssessment.cpp

EventTransitionAssessment.obj: connectors/EventTransitionAssessment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EventTransitionAssessment.obj -MD -MP -MF $(DEPDIR)/EventTransitionAssessment.Tpo -c -o EventTransitionAssessment.obj `if test -f 'connectors/EventTransitionAssessment.cpp'; then $(CYGPATH_W) 'connectors/EventTransitionAssessment.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/EventTransitionAssessment.cpp'; fi`
	mv -f $(DEPDIR)/EventTransitionAssessment.Tpo $(DEPDIR)/EventTransitionAssessment.Po
#	source='connectors/EventTransitionAssessment.cpp' object='EventTransitionAssessment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EventTransitionAssessment.obj `if test -f 'connectors/EventTransitionAssessment.cpp'; then $(CYGPATH_W) 'connectors/EventTransitionAssessment.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/EventTransitionAssessment.cpp'; fi`

EventUtil.o: connectors/EventUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EventUtil.o -MD -MP -MF $(DEPDIR)/EventUtil.Tpo -c -o EventUtil.o `test -f 'connectors/EventUtil.cpp' || echo '$(srcdir)/'`connectors/EventUtil.cpp
	mv -f $(DEPDIR)/EventUtil.Tpo $(DEPDIR)/EventUtil.Po
#	source='connectors/EventUtil.cpp' object='EventUtil.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EventUtil.o `test -f 'connectors/EventUtil.cpp' || echo '$(srcdir)/'`connectors/EventUtil.cpp

EventUtil.obj: connectors/EventUtil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EventUtil.obj -MD -MP -MF $(DEPDIR)/EventUtil.Tpo -c -o EventUtil.obj `if test -f 'connectors/EventUtil.cpp'; then $(CYGPATH_W) 'connectors/EventUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/EventUtil.cpp'; fi`
	mv -f $(DEPDIR)/EventUtil.Tpo $(DEPDIR)/EventUtil.Po
#	source='connectors/EventUtil.cpp' object='EventUtil.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EventUtil.obj `if test -f 'connectors/EventUtil.cpp'; then $(CYGPATH_W) 'connectors/EventUtil.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/EventUtil.cpp'; fi`

Role.o: connectors/Role.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Role.o -MD -MP -MF $(DEPDIR)/Role.Tpo -c -o Role.o `test -f 'connectors/Role.cpp' || echo '$(srcdir)/'`connectors/Role.cpp
	mv -f $(DEPDIR)/Role.Tpo $(DEPDIR)/Role.Po
#	source='connectors/Role.cpp' object='Role.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Role.o `test -f 'connectors/Role.cpp' || echo '$(srcdir)/'`connectors/Role.cpp

Role.obj: connectors/Role.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Role.obj -MD -MP -MF $(DEPDIR)/Role.Tpo -c -o Role.obj `if test -f 'connectors/Role.cpp'; then $(CYGPATH_W) 'connectors/Role.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/Role.cpp'; fi`
	mv -f $(DEPDIR)/Role.Tpo $(DEPDIR)/Role.Po
#	source='connectors/Role.cpp' object='Role.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Role.obj `if test -f 'connectors/Role.cpp'; then $(CYGPATH_W) 'connectors/Role.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/Role.cpp'; fi`

SimpleAction.o: connectors/SimpleAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleAction.o -MD -MP -MF $(DEPDIR)/SimpleAction.Tpo -c -o SimpleAction.o `test -f 'connectors/SimpleAction.cpp' || echo '$(srcdir)/'`connectors/SimpleAction.cpp
	mv -f $(DEPDIR)/SimpleAction.Tpo $(DEPDIR)/SimpleAction.Po
#	source='connectors/SimpleAction.cpp' object='SimpleAction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleAction.o `test -f 'connectors/SimpleAction.cpp' || echo '$(srcdir)/'`connectors/SimpleAction.cpp

SimpleAction.obj: connectors/SimpleAction.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleAction.obj -MD -MP -MF $(DEPDIR)/SimpleAction.Tpo -c -o SimpleAction.obj `if test -f 'connectors/SimpleAction.cpp'; then $(CYGPATH_W) 'connectors/SimpleAction.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/SimpleAction.cpp'; fi`
	mv -f $(DEPDIR)/SimpleAction.Tpo $(DEPDIR)/SimpleAction.Po
#	source='connectors/SimpleAction.cpp' object='SimpleAction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleAction.obj `if test -f 'connectors/SimpleAction.cpp'; then $(CYGPATH_W) 'connectors/SimpleAction.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/SimpleAction.cpp'; fi`

SimpleCondition.o: connectors/SimpleCondition.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleCondition.o -MD -MP -MF $(DEPDIR)/SimpleCondition.Tpo -c -o SimpleCondition.o `test -f 'connectors/SimpleCondition.cpp' || echo '$(srcdir)/'`connectors/SimpleCondition.cpp
	mv -f $(DEPDIR)/SimpleCondition.Tpo $(DEPDIR)/SimpleCondition.Po
#	source='connectors/SimpleCondition.cpp' object='SimpleCondition.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleCondition.o `test -f 'connectors/SimpleCondition.cpp' || echo '$(srcdir)/'`connectors/SimpleCondition.cpp

SimpleCondition.obj: connectors/SimpleCondition.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SimpleCondition.obj -MD -MP -MF $(DEPDIR)/SimpleCondition.Tpo -c -o SimpleCondition.obj `if test -f 'connectors/SimpleCondition.cpp'; then $(CYGPATH_W) 'connectors/SimpleCondition.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/SimpleCondition.cpp'; fi`
	mv -f $(DEPDIR)/SimpleCondition.Tpo $(DEPDIR)/SimpleCondition.Po
#	source='connectors/SimpleCondition.cpp' object='SimpleCondition.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SimpleCondition.obj `if test -f 'connectors/SimpleCondition.cpp'; then $(CYGPATH_W) 'connectors/SimpleCondition.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/SimpleCondition.cpp'; fi`

TriggerExpression.o: connectors/TriggerExpression.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TriggerExpression.o -MD -MP -MF $(DEPDIR)/TriggerExpression.Tpo -c -o TriggerExpression.o `test -f 'connectors/TriggerExpression.cpp' || echo '$(srcdir)/'`connectors/TriggerExpression.cpp
	mv -f $(DEPDIR)/TriggerExpression.Tpo $(DEPDIR)/TriggerExpression.Po
#	source='connectors/TriggerExpression.cpp' object='TriggerExpression.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TriggerExpression.o `test -f 'connectors/TriggerExpression.cpp' || echo '$(srcdir)/'`connectors/TriggerExpression.cpp

TriggerExpression.obj: connectors/TriggerExpression.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TriggerExpression.obj -MD -MP -MF $(DEPDIR)/TriggerExpression.Tpo -c -o TriggerExpression.obj `if test -f 'connectors/TriggerExpression.cpp'; then $(CYGPATH_W) 'connectors/TriggerExpression.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/TriggerExpression.cpp'; fi`
	mv -f $(DEPDIR)/TriggerExpression.Tpo $(DEPDIR)/TriggerExpression.Po
#	source='connectors/TriggerExpression.cpp' object='TriggerExpression.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TriggerExpression.obj `if test -f 'connectors/TriggerExpression.cpp'; then $(CYGPATH_W) 'connectors/TriggerExpression.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/TriggerExpression.cpp'; fi`

ValueAssessment.o: connectors/ValueAssessment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ValueAssessment.o -MD -MP -MF $(DEPDIR)/ValueAssessment.Tpo -c -o ValueAssessment.o `test -f 'connectors/ValueAssessment.cpp' || echo '$(srcdir)/'`connectors/ValueAssessment.cpp
	mv -f $(DEPDIR)/ValueAssessment.Tpo $(DEPDIR)/ValueAssessment.Po
#	source='connectors/ValueAssessment.cpp' object='ValueAssessment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ValueAssessment.o `test -f 'connectors/ValueAssessment.cpp' || echo '$(srcdir)/'`connectors/ValueAssessment.cpp

ValueAssessment.obj: connectors/ValueAssessment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ValueAssessment.obj -MD -MP -MF $(DEPDIR)/ValueAssessment.Tpo -c -o ValueAssessment.obj `if test -f 'connectors/ValueAssessment.cpp'; then $(CYGPATH_W) 'connectors/ValueAssessment.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/ValueAssessment.cpp'; fi`
	mv -f $(DEPDIR)/ValueAssessment.Tpo $(DEPDIR)/ValueAssessment.Po
#	source='connectors/ValueAssessment.cpp' object='ValueAssessment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ValueAssessment.obj `if test -f 'connectors/ValueAssessment.cpp'; then $(CYGPATH_W) 'connectors/ValueAssessment.cpp'; else $(CYGPATH_W) '$(srcdir)/connectors/ValueAssessment.cpp'; fi`

AbsoluteReferenceContent.o: components/AbsoluteReferenceContent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AbsoluteReferenceContent.o -MD -MP -MF $(DEPDIR)/AbsoluteReferenceContent.Tpo -c -o AbsoluteReferenceContent.o `test -f 'components/AbsoluteReferenceContent.cpp' || echo '$(srcdir)/'`components/AbsoluteReferenceContent.cpp
	mv -f $(DEPDIR)/AbsoluteReferenceContent.Tpo $(DEPDIR)/AbsoluteReferenceContent.Po
#	source='components/AbsoluteReferenceContent.cpp' object='AbsoluteReferenceContent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AbsoluteReferenceContent.o `test -f 'components/AbsoluteReferenceContent.cpp' || echo '$(srcdir)/'`components/AbsoluteReferenceContent.cpp

AbsoluteReferenceContent.obj: components/AbsoluteReferenceContent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AbsoluteReferenceContent.obj -MD -MP -MF $(DEPDIR)/AbsoluteReferenceContent.Tpo -c -o AbsoluteReferenceContent.obj `if test -f 'components/AbsoluteReferenceContent.cpp'; then $(CYGPATH_W) 'components/AbsoluteReferenceContent.cpp'; else $(CYGPATH_W) '$(srcdir)/components/AbsoluteReferenceContent.cpp'; fi`
	mv -f $(DEPDIR)/AbsoluteReferenceContent.Tpo $(DEPDIR)/AbsoluteReferenceContent.Po
#	source='components/AbsoluteReferenceContent.cpp' object='AbsoluteReferenceContent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AbsoluteReferenceContent.obj `if test -f 'components/AbsoluteReferenceContent.cpp'; then $(CYGPATH_W) 'components/AbsoluteReferenceContent.cpp'; else $(CYGPATH_W) '$(srcdir)/components/AbsoluteReferenceContent.cpp'; fi`

CompositeNode.o: components/CompositeNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompositeNode.o -MD -MP -MF $(DEPDIR)/CompositeNode.Tpo -c -o CompositeNode.o `test -f 'components/CompositeNode.cpp' || echo '$(srcdir)/'`components/CompositeNode.cpp
	mv -f $(DEPDIR)/CompositeNode.Tpo $(DEPDIR)/CompositeNode.Po
#	source='components/CompositeNode.cpp' object='CompositeNode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompositeNode.o `test -f 'components/CompositeNode.cpp' || echo '$(srcdir)/'`components/CompositeNode.cpp

CompositeNode.obj: components/CompositeNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CompositeNode.obj -MD -MP -MF $(DEPDIR)/CompositeNode.Tpo -c -o CompositeNode.obj `if test -f 'components/CompositeNode.cpp'; then $(CYGPATH_W) 'components/CompositeNode.cpp'; else $(CYGPATH_W) '$(srcdir)/components/CompositeNode.cpp'; fi`
	mv -f $(DEPDIR)/CompositeNode.Tpo $(DEPDIR)/CompositeNode.Po
#	source='components/CompositeNode.cpp' object='CompositeNode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CompositeNode.obj `if test -f 'components/CompositeNode.cpp'; then $(CYGPATH_W) 'components/CompositeNode.cpp'; else $(CYGPATH_W) '$(srcdir)/components/CompositeNode.cpp'; fi`

Content.o: components/Content.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Content.o -MD -MP -MF $(DEPDIR)/Content.Tpo -c -o Content.o `test -f 'components/Content.cpp' || echo '$(srcdir)/'`components/Content.cpp
	mv -f $(DEPDIR)/Content.Tpo $(DEPDIR)/Content.Po
#	source='components/Content.cpp' object='Content.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Content.o `test -f 'components/Content.cpp' || echo '$(srcdir)/'`components/Content.cpp

Content.obj: components/Content.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Content.obj -MD -MP -MF $(DEPDIR)/Content.Tpo -c -o Content.obj `if test -f 'components/Content.cpp'; then $(CYGPATH_W) 'components/Content.cpp'; else $(CYGPATH_W) '$(srcdir)/components/Content.cpp'; fi`
	mv -f $(DEPDIR)/Content.Tpo $(DEPDIR)/Content.Po
#	source='components/Content.cpp' object='Content.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Content.obj `if test -f 'components/Content.cpp'; then $(CYGPATH_W) 'components/Content.cpp'; else $(CYGPATH_W) '$(srcdir)/components/Content.cpp'; fi`

ContentNode.o: components/ContentNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContentNode.o -MD -MP -MF $(DEPDIR)/ContentNode.Tpo -c -o ContentNode.o `test -f 'components/ContentNode.cpp' || echo '$(srcdir)/'`components/ContentNode.cpp
	mv -f $(DEPDIR)/ContentNode.Tpo $(DEPDIR)/ContentNode.Po
#	source='components/ContentNode.cpp' object='ContentNode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContentNode.o `test -f 'components/ContentNode.cpp' || echo '$(srcdir)/'`components/ContentNode.cpp

ContentNode.obj: components/ContentNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContentNode.obj -MD -MP -MF $(DEPDIR)/ContentNode.Tpo -c -o ContentNode.obj `if test -f 'components/ContentNode.cpp'; then $(CYGPATH_W) 'components/ContentNode.cpp'; else $(CYGPATH_W) '$(srcdir)/components/ContentNode.cpp'; fi`
	mv -f $(DEPDIR)/ContentNode.Tpo $(DEPDIR)/ContentNode.Po
#	source='components/ContentNode.cpp' object='ContentNode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContentNode.obj `if test -f 'components/ContentNode.cpp'; then $(CYGPATH_W) 'components/ContentNode.cpp'; else $(CYGPATH_W) '$(srcdir)/components/ContentNode.cpp'; fi`

ContentTypeManager.o: components/ContentTypeManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContentTypeManager.o -MD -MP -MF $(DEPDIR)/ContentTypeManager.Tpo -c -o ContentTypeManager.o `test -f 'components/ContentTypeManager.cpp' || echo '$(srcdir)/'`components/ContentTypeManager.cpp
	mv -f $(DEPDIR)/ContentTypeManager.Tpo $(DEPDIR)/ContentTypeManager.Po
#	source='components/ContentTypeManager.cpp' object='ContentTypeManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContentTypeManager.o `test -f 'components/ContentTypeManager.cpp' || echo '$(srcdir)/'`components/ContentTypeManager.cpp

ContentTypeManager.obj: components/ContentTypeManager.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContentTypeManager.obj -MD -MP -MF $(DEPDIR)/ContentTypeManager.Tpo -c -o ContentTypeManager.obj `if test -f 'components/ContentTypeManager.cpp'; then $(CYGPATH_W) 'components/ContentTypeManager.cpp'; else $(CYGPATH_W) '$(srcdir)/components/ContentTypeManager.cpp'; fi`
	mv -f $(DEPDIR)/ContentTypeManager.Tpo $(DEPDIR)/ContentTypeManager.Po
#	source='components/ContentTypeManager.cpp' object='ContentTypeManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContentTypeManager.obj `if test -f 'components/ContentTypeManager.cpp'; then $(CYGPATH_W) 'components/ContentTypeManager.cpp'; else $(CYGPATH_W) '$(srcdir)/components/ContentTypeManager.cpp'; fi`

ContextNode.o: components/ContextNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContextNode.o -MD -MP -MF $(DEPDIR)/ContextNode.Tpo -c -o ContextNode.o `test -f 'components/ContextNode.cpp' || echo '$(srcdir)/'`components/ContextNode.cpp
	mv -f $(DEPDIR)/ContextNode.Tpo $(DEPDIR)/ContextNode.Po
#	source='components/ContextNode.cpp' object='ContextNode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContextNode.o `test -f 'components/ContextNode.cpp' || echo '$(srcdir)/'`components/ContextNode.cpp

ContextNode.obj: components/ContextNode.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContextNode.obj -MD -MP -MF $(DEPDIR)/ContextNode.Tpo -c -o ContextNode.obj `if test -f 'components/ContextNode.cpp'; then $(CYGPATH_W) 'components/ContextNode.cpp'; else $(CYGPATH_W) '$(srcdir)/components/ContextNode.cpp'; fi`
	mv -f $(DEPDIR)/ContextNode.Tpo $(DEPDIR)/ContextNode.Po
#	source='components/ContextNode.cpp' object='ContextNode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContextNode.obj `if test -f 'components/ContextNode.cpp'; then $(CYGPATH_W) 'components/ContextNode.cpp'; else $(CYGPATH_W) '$(srcdir)/components/ContextNode.cpp'; fi`

Node.o: components/Node.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Node.o -MD -MP -MF $(DEPDIR)/Node.Tpo -c -o Node.o `test -f 'components/Node.cpp' || echo '$(srcdir)/'`components/Node.cpp
	mv -f $(DEPDIR)/Node.Tpo $(DEPDIR)/Node.Po
#	source='components/Node.cpp' object='Node.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Node.o `test -f 'components/Node.cpp' || echo '$(srcdir)/'`components/Node.cpp

Node.obj: components/Node.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Node.obj -MD -MP -MF $(DEPDIR)/Node.Tpo -c -o Node.obj `if test -f 'components/Node.cpp'; then $(CYGPATH_W) 'components/Node.cpp'; else $(CYGPATH_W) '$(srcdir)/components/Node.cpp'; fi`
	mv -f $(DEPDIR)/Node.Tpo $(DEPDIR)/Node.Po
#	source='components/Node.cpp' object='Node.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Node.obj `if test -f 'components/Node.cpp'; then $(CYGPATH_W) 'components/Node.cpp'; else $(CYGPATH_W) '$(srcdir)/components/Node.cpp'; fi`

NodeEntity.o: components/NodeEntity.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NodeEntity.o -MD -MP -MF $(DEPDIR)/NodeEntity.Tpo -c -o NodeEntity.o `test -f 'components/NodeEntity.cpp' || echo '$(srcdir)/'`components/NodeEntity.cpp
	mv -f $(DEPDIR)/NodeEntity.Tpo $(DEPDIR)/NodeEntity.Po
#	source='components/NodeEntity.cpp' object='NodeEntity.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NodeEntity.o `test -f 'components/NodeEntity.cpp' || echo '$(srcdir)/'`components/NodeEntity.cpp

NodeEntity.obj: components/NodeEntity.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NodeEntity.obj -MD -MP -MF $(DEPDIR)/NodeEntity.Tpo -c -o NodeEntity.obj `if test -f 'components/NodeEntity.cpp'; then $(CYGPATH_W) 'components/NodeEntity.cpp'; else $(CYGPATH_W) '$(srcdir)/components/NodeEntity.cpp'; fi`
	mv -f $(DEPDIR)/NodeEntity.Tpo $(DEPDIR)/NodeEntity.Po
#	source='components/NodeEntity.cpp' object='NodeEntity.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NodeEntity.obj `if test -f 'components/NodeEntity.cpp'; then $(CYGPATH_W) 'components/NodeEntity.cpp'; else $(CYGPATH_W) '$(srcdir)/components/NodeEntity.cpp'; fi`

PrivateBase.o: components/PrivateBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PrivateBase.o -MD -MP -MF $(DEPDIR)/PrivateBase.Tpo -c -o PrivateBase.o `test -f 'components/PrivateBase.cpp' || echo '$(srcdir)/'`components/PrivateBase.cpp
	mv -f $(DEPDIR)/PrivateBase.Tpo $(DEPDIR)/PrivateBase.Po
#	source='components/PrivateBase.cpp' object='PrivateBase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PrivateBase.o `test -f 'components/PrivateBase.cpp' || echo '$(srcdir)/'`components/PrivateBase.cpp

PrivateBase.obj: components/PrivateBase.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PrivateBase.obj -MD -MP -MF $(DEPDIR)/PrivateBase.Tpo -c -o PrivateBase.obj `if test -f 'components/PrivateBase.cpp'; then $(CYGPATH_W) 'components/PrivateBase.cpp'; else $(CYGPATH_W) '$(srcdir)/components/PrivateBase.cpp'; fi`
	mv -f $(DEPDIR)/PrivateBase.Tpo $(DEPDIR)/PrivateBase.Po
#	source='components/PrivateBase.cpp' object='PrivateBase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PrivateBase.obj `if test -f 'components/PrivateBase.cpp'; then $(CYGPATH_W) 'components/PrivateBase.cpp'; else $(CYGPATH_W) '$(srcdir)/components/PrivateBase.cpp'; fi`

ReferenceContent.o: components/ReferenceContent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ReferenceContent.o -MD -MP -MF $(DEPDIR)/ReferenceContent.Tpo -c -o ReferenceContent.o `test -f 'components/ReferenceContent.cpp' || echo '$(srcdir)/'`components/ReferenceContent.cpp
	mv -f $(DEPDIR)/ReferenceContent.Tpo $(DEPDIR)/ReferenceContent.Po
#	source='components/ReferenceContent.cpp' object='ReferenceContent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ReferenceContent.o `test -f 'components/ReferenceContent.cpp' || echo '$(srcdir)/'`components/ReferenceContent.cpp

ReferenceContent.obj: components/ReferenceContent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ReferenceContent.obj -MD -MP -MF $(DEPDIR)/ReferenceContent.Tpo -c -o ReferenceContent.obj `if test -f 'components/ReferenceContent.cpp'; then $(CYGPATH_W) 'components/ReferenceContent.cpp'; else $(CYGPATH_W) '$(srcdir)/components/ReferenceContent.cpp'; fi`
	mv -f $(DEPDIR)/ReferenceContent.Tpo $(DEPDIR)/ReferenceContent.Po
#	source='components/ReferenceContent.cpp' object='ReferenceContent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ReferenceContent.obj `if test -f 'components/ReferenceContent.cpp'; then $(CYGPATH_W) 'components/ReferenceContent.cpp'; else $(CYGPATH_W) '$(srcdir)/components/ReferenceContent.cpp'; fi`

RelativeReferenceContent.o: components/RelativeReferenceContent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RelativeReferenceContent.o -MD -MP -MF $(DEPDIR)/RelativeReferenceContent.Tpo -c -o RelativeReferenceContent.o `test -f 'components/RelativeReferenceContent.cpp' || echo '$(srcdir)/'`components/RelativeReferenceContent.cpp
	mv -f $(DEPDIR)/RelativeReferenceContent.Tpo $(DEPDIR)/RelativeReferenceContent.Po
#	source='components/RelativeReferenceContent.cpp' object='RelativeReferenceContent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RelativeReferenceContent.o `test -f 'components/RelativeReferenceContent.cpp' || echo '$(srcdir)/'`components/RelativeReferenceContent.cpp

RelativeReferenceContent.obj: components/RelativeReferenceContent.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RelativeReferenceContent.obj -MD -MP -MF $(DEPDIR)/RelativeReferenceContent.Tpo -c -o RelativeReferenceContent.obj `if test -f 'components/RelativeReferenceContent.cpp'; then $(CYGPATH_W) 'components/RelativeReferenceContent.cpp'; else $(CYGPATH_W) '$(srcdir)/components/RelativeReferenceContent.cpp'; fi`
	mv -f $(DEPDIR)/RelativeReferenceContent.Tpo $(DEPDIR)/RelativeReferenceContent.Po
#	source='components/RelativeReferenceContent.cpp' object='RelativeReferenceContent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RelativeReferenceContent.obj `if test -f 'components/RelativeReferenceContent.cpp'; then $(CYGPATH_W) 'components/RelativeReferenceContent.cpp'; else $(CYGPATH_W) '$(srcdir)/components/RelativeReferenceContent.cpp'; fi`

Animation.o: animation/Animation.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Animation.o -MD -MP -MF $(DEPDIR)/Animation.Tpo -c -o Animation.o `test -f 'animation/Animation.cpp' || echo '$(srcdir)/'`animation/Animation.cpp
	mv -f $(DEPDIR)/Animation.Tpo $(DEPDIR)/Animation.Po
#	source='animation/Animation.cpp' object='Animation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Animation.o `test -f 'animation/Animation.cpp' || echo '$(srcdir)/'`animation/Animation.cpp

Animation.obj: animation/Animation.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Animation.obj -MD -MP -MF $(DEPDIR)/Animation.Tpo -c -o Animation.obj `if test -f 'animation/Animation.cpp'; then $(CYGPATH_W) 'animation/Animation.cpp'; else $(CYGPATH_W) '$(srcdir)/animation/Animation.cpp'; fi`
	mv -f $(DEPDIR)/Animation.Tpo $(DEPDIR)/Animation.Po
#	source='animation/Animation.cpp' object='Animation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Animation.obj `if test -f 'animation/Animation.cpp'; then $(CYGPATH_W) 'animation/Animation.cpp'; else $(CYGPATH_W) '$(srcdir)/animation/Animation.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(localLibdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-localLibPROGRAMS \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-localLibPROGRAMS

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-localLibPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-localLibPROGRAMS ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am \
	install-localLibPROGRAMS install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-localLibPROGRAMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
