digraph G
{
  edge [fontname="FreeSans.ttf",fontsize=10,labelfontname="FreeSans.ttf",labelfontsize=10];
  node [fontname="FreeSans.ttf",fontsize=10,shape=record];
  Node1 [label="{FormatterLinkConverter\n|- compiler\l|+ FormatterLinkConverter()\l+ ~FormatterLinkConverter()\l+ createCausalLink()\l- createAction()\l- createCondition()\l- createCompoundTriggerCondition()\l- createCondition()\l- createAssessmentStatement()\l- createStatement()\l- createAttributeAssessment()\l- createSimpleAction()\l- createCompoundAction()\l- createSimpleCondition()\l- createEvent()\l- getDelayParameter()\l- getBindKey()\l- compileDelay()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="compiler",arrowtail="open"];
  Node2 [label="{FormatterConverter\n|- depthLevel\l- executionObjects\l- settingObjects\l- linkCompiler\l- scheduler\l- ruleAdapter\l- objectsMutex\l- handling\l|+ FormatterConverter()\l+ ~FormatterConverter()\l+ stopListening()\l+ getRunningObjects()\l+ setHandlingStatus()\l+ getObjectFromNodeId()\l+ setScheduler()\l+ setDepthLevel()\l+ getDepthLevel()\l+ checkGradSameInstance()\l+ addSameInstance()\l+ compileExecutionObjectLinks()\l+ getExecutionObject()\l+ getSettingNodeObjects()\l+ getEvent()\l+ compileExecutionObjectLinks()\l+ processExecutionObjectSwitch()\l+ insertContext()\l+ removeExecutionObject()\l+ removeExecutionObject()\l+ hasExecutionObject()\l+ addCausalLink()\l+ eventStateChanged()\l+ getPriorityType()\l+ reset()\l+ getCascadingDescriptor()\l- addExecutionObject()\l- getParentExecutionObject()\l- createMultichannelObject()\l- createExecutionObject()\l- setActionListener()\l- resolveSwitchEvents()\l- insertNode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classbr_1_1pucrio_1_1telemidia_1_1ginga_1_1ncl_1_1emconverter_1_1FormatterConverter.html"];
  Node3 -> Node2 [dir=back,color="midnightblue",fontsize=10,style="solid",arrowtail="empty"];
  Node3 [label="{IEventListener\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node4 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="objectsMutex",arrowtail="open"];
  Node4 [label="{pthread_mutex_t\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node5 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="depthLevel",arrowtail="open"];
  Node5 [label="{int\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node6 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="handling",arrowtail="open"];
  Node6 [label="{bool\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node7 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="ruleAdapter",arrowtail="open"];
  Node7 [label="{RuleAdapter *\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node8 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="executionObjects",arrowtail="open"];
  Node8 [label="{map\< string, ExecutionObject * \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node9 -> Node8 [dir=back,color="orange",fontsize=10,style="dashed",label="\< string, ExecutionObject * \>"];
  Node9 [label="{map\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class."];
  Node10 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="scheduler",arrowtail="open"];
  Node10 [label="{FormatterScheduler\n|- ruleAdapter\l- playerManager\l- layoutManager\l- focusManager\l- compiler\l- schedulerListeners\l- documentEvents\l- documentStatus\l- typeSet\l|+ FormatterScheduler()\l+ ~FormatterScheduler()\l+ stopListening()\l+ setKeyHandler()\l+ setStandByState()\l+ getFocusManager()\l+ getFormatterLayout()\l+ runAction()\l+ startEvent()\l+ stopEvent()\l+ pauseEvent()\l+ resumeEvent()\l+ startDocument()\l+ stopDocument()\l+ pauseDocument()\l+ resumeDocument()\l+ stopAllDocuments()\l+ pauseAllDocuments()\l+ resumeAllDocuments()\l+ eventStateChanged()\l+ getPriorityType()\l+ addSchedulerListener()\l+ removeSchedulerListener()\l- isDocumentRunning()\l- setTimeBaseObject()\l- runAction()\l- runActionOverProperty()\l- runActionOverApplicationObject()\l- runActionOverComposition()\l- runActionOverSwitch()\l- runSwitchEvent()\l- solveImplicitRefAssessment()\l- initializeDefaultSettings()\l- initializeDocumentSettings()\l- removeDocument()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classbr_1_1pucrio_1_1telemidia_1_1ginga_1_1ncl_1_1FormatterScheduler.html"];
  Node11 -> Node10 [dir=back,color="midnightblue",fontsize=10,style="solid",arrowtail="empty"];
  Node11 [label="{LinkActionListener\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node3 -> Node10 [dir=back,color="midnightblue",fontsize=10,style="solid",arrowtail="empty"];
  Node12 -> Node10 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="playerManager",arrowtail="open"];
  Node12 [label="{PlayerAdapterManager *\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node13 -> Node10 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="schedulerListeners",arrowtail="open"];
  Node13 [label="{vector\< IFormatterSchedulerListener * \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node14 -> Node13 [dir=back,color="orange",fontsize=10,style="dashed",label="\< IFormatterSchedulerListener * \>"];
  Node14 [label="{vector\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class."];
  Node15 -> Node10 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="focusManager",arrowtail="open"];
  Node15 [label="{FormatterFocusManager *\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node16 -> Node10 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="documentEvents",arrowtail="open"];
  Node16 [label="{vector\< FormatterEvent * \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node14 -> Node16 [dir=back,color="orange",fontsize=10,style="dashed",label="\< FormatterEvent * \>"];
  Node17 -> Node10 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="typeSet",arrowtail="open"];
  Node17 [label="{set\< string \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node18 -> Node17 [dir=back,color="orange",fontsize=10,style="dashed",label="\< string \>"];
  Node18 [label="{set\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class."];
  Node19 -> Node10 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="documentStatus",arrowtail="open"];
  Node19 [label="{map\< FormatterEvent *, bool \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node9 -> Node19 [dir=back,color="orange",fontsize=10,style="dashed",label="\< FormatterEvent *, bool \>"];
  Node7 -> Node10 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="ruleAdapter",arrowtail="open"];
  Node20 -> Node10 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="compiler",arrowtail="open"];
  Node20 [label="{void *\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node21 -> Node10 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="layoutManager",arrowtail="open"];
  Node21 [label="{IFormatterMultiDevice *\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node22 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="settingObjects",arrowtail="open"];
  Node22 [label="{set\< ExecutionObject * \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node18 -> Node22 [dir=back,color="orange",fontsize=10,style="dashed",label="\< ExecutionObject * \>"];
  Node20 -> Node2 [dir=back,color="darkorchid3",fontsize=10,style="dashed",label="linkCompiler",arrowtail="open"];
}
